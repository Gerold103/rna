#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 131
#define YY_END_OF_BUFFER 132
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[928] =
    {   0,
        0,    0,    2,    2,  132,  130,    4,    4,  130,  130,
      122,  130,  122,  122,  125,  122,  122,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
        2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  118,    0,    0,  129,
        1,  126,  124,  123,  125,  120,  119,  121,  128,  128,
      128,  128,  128,  109,  128,  110,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  111,  128,  112,  113,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      114,  115,  116,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  117,
      128,  128,  128,  128,  128,  128,  128,  128,    2,    2,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  127,  123,   96,  128,   97,  128,  128,   98,
       99,  128,  128,  128,  128,  128,  128,  128,  128,  100,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  101,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  102,  128,
      128,  103,  128,  128,  128,  128,  128,  128,  128,  128,

      104,  128,  128,  105,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  106,  128,  128,  128,  128,
      128,  107,  128,  128,  128,  108,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      128,  128,  128,  128,  128,   74,  128,  128,  128,  128,
      128,   75,  128,  128,  128,  128,   76,  128,  128,  128,
       77,  128,  128,  128,  128,  128,   78,   79,   80,  128,
      128,   81,  128,   82,  128,  128,  128,  128,  128,  128,
       83,  128,   84,   85,   86,  128,   87,  128,  128,  128,
      128,   88,  128,  128,  128,  128,  128,   89,   90,  128,
      128,  128,  128,  128,  128,  128,   91,  128,  128,  128,

      128,  128,   92,   93,  128,  128,  128,  128,  128,  128,
      128,   94,  128,  128,   95,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

       56,   57,  128,  128,  128,  128,  128,  128,  128,   58,
      128,  128,  128,   59,  128,  128,  128,  128,  128,  128,
      128,  128,  128,   60,  128,  128,  128,   61,   62,  128,
      128,  128,  128,   63,   64,   65,   66,  128,  128,  128,
       67,   68,  128,  128,  128,  128,  128,   69,  128,  128,
      128,  128,  128,   70,  128,  128,  128,   71,  128,  128,
      128,   72,  128,  128,   73,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      128,   32,  128,  128,   33,  128,   34,  128,  128,   35,
       36,  128,   37,   38,   39,  128,   40,  128,   41,   42,
      128,   43,   44,  128,  128,   45,  128,  128,   46,  128,
      128,  128,   47,  128,   48,   49,   50,  128,  128,   51,
      128,  128,  128,   52,   53,   54,   55,  128,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   16,   17,   18,   19,
       20,  128,   21,  128,   22,   23,   24,   25,  128,   26,
      128,  128,   27,   28,  128,   29,   30,  128,  128,  128,
      128,   31,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  128,   12,
      128,   13,  128,   14,  128,  128,  128,   15,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  128,    8,

      128,    9,   10,   11,    2,    2,    2,    2,    2,    2,
        6,    7,  128,    2,    2,    2,  128,    2,  128,    2,
      128,    2,  128,    2,    5,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    6,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        1,    1,    1,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[935] =
    {   0,
        0,    0,   66,    0,  414, 3693,  131,  133,  401,    0,
     3693,  404,  129,  399,  131,  130,  396,  127,  120,  135,
      181,  113,  170,  122,  134,  170,  123,  137,  189,  139,
      186,  218,  226,    0,  142,  269,  317,  227,  221,  184,
        0,  166,  258,  387,  368,    0,  360,  200,  350,  256,
      256,  340,  375,  434,  486,  538,  256,  586,  264,  305,
      634,  367,  235,  426,  288,  686,  734,  786,  273,  388,
      836,  888,  936,  444,  438,  302, 3693,  344,  292, 3693,
     3693,  286,  282,  265,  298, 3693, 3693, 3693,    0,  198,
      217,  303,  327,  297,  370,    0,  365,  366,  433,  299,

      309,  487,  436,  313,  323,  380,  514,  373,  370,  376,
      425,  429,  435,  475,  438,    0,  440,  521,  471,  480,
      470,  494,  496,  548,  484,  496,  522,  525,  536,  553,
      549,    0,  554,  539,  542,  560,  584,  578,  564,  565,
      582,  564,  578,  598,  601,  603,  596,  601,  596,  594,
      594,  634,  613,  618,  621,  640,  644,  630,    0,  354,
        0,  266,  256,    0,    0,  248,  245,  236,  355,    0,
        0,    0,  646,  657,  674,  685,  691,  724,  725,  728,
      769,  778,  780,  784,  815,  988,  824,  802,  840,  855,
     1038,  869,  886,  890,  914,  922,  944,  938,  978,  821,

      986, 1087,  990,  976,  904, 1000, 1044, 1034, 1053, 1083,
     1084, 1097, 1048, 1098, 1088,  946, 1133, 1122, 1127, 1150,
     1148, 1162, 1136, 1158, 1184, 1186, 1181, 1214, 1215, 1220,
     1225, 1230, 1216, 1253, 1254, 1275, 1284, 1285, 1287, 1313,
     1288, 1303, 3693,  208,    0,  651,    0,  652,  681,    0,
        0,  700,  713,  729,  741,  725,  731,  768,  751,    0,
      832,  836,  858,  878,  893,  930,  925,  946,  983, 1008,
     1012, 1020, 1026, 1036, 1051,    0, 1158, 1185, 1203, 1186,
     1263, 1265, 1256, 1275, 1282, 1320, 1324, 1325, 1327, 1312,
     1320,    0, 1321, 1338, 1335, 1342, 1346, 1341, 1328, 1330,

        0, 1341, 1336, 1343, 1358, 1359, 1365, 1353, 1356, 1364,
     1378, 1362, 1375, 1379, 1381,    0, 1364, 1368, 1372, 1376,
     1384,    0, 1381, 1378, 1395,    0, 1387, 1388, 1387, 1406,
     1394, 1395, 1394, 1398, 1402, 1413,    0,  203, 1421, 1426,
     1431, 1432, 1437, 1434, 1435, 1450, 1445, 1449, 1488, 1475,
     1474, 1503, 1500, 1485, 1504, 1529, 1537, 1519, 1542, 1525,
     1528, 1568, 1571, 1558, 1553, 1579, 1583, 1587, 1593, 1596,
     1611, 1622, 1628, 1617, 1647, 1641, 1612, 1651, 1653, 1662,
     1665, 1676, 1681, 1679, 1704, 1687, 1705, 1710, 1715, 1739,
     1721, 1743, 1733, 1755, 1754, 1777, 1779, 1769, 1758, 1767,

     1807, 1808, 1809, 1813, 1841, 1823, 1812, 1825, 1831, 1846,
     1857, 1867, 1871, 1869, 1885, 1879, 1897, 1880, 1901, 1903,
     1911, 1929, 1933, 1955, 1925, 1957, 1963, 1959, 1985, 1989,
     1453, 1467, 1491, 1504, 1559,    0, 1578, 1600, 1644, 1655,
     1688,    0, 1754, 1748, 1758, 1867,    0, 1917, 1933, 1933,
        0, 1958, 1976, 1972, 1976, 1997,    0,    0,    0, 1998,
     1984,    0, 1988,    0, 1989, 1990, 1988, 1998, 2000, 2015,
        0, 2016,    0,    0,    0, 2012,    0, 2022, 2031, 2019,
     2022,    0, 2039, 2039, 2028, 2029, 2035,    0,    0, 2049,
     2050, 2039, 2035, 2034, 2043, 2054,    0, 2053, 2053, 2044,

     2061, 2053,    0, 2051, 2069, 2062, 2061, 2085, 2067, 2081,
     2085,    0, 2071, 2089,    0, 2093, 2102, 2091, 2117, 2099,
     2101, 2127, 2131, 2132, 2141, 2153, 2135, 2169, 2165, 2171,
     2197, 2143, 2201, 2202, 2207, 2184, 2219, 2225, 2235, 2223,
     2260, 2247, 2259, 2261, 2273, 2264, 2277, 2289, 2285, 2303,
     2301, 2299, 2322, 2331, 2352, 2290, 2353, 2339, 2343, 2347,
     2368, 2355, 2357, 2376, 2393, 2385, 2389, 2408, 2397, 2418,
     2426, 2421, 2422, 2427, 2461, 2463, 2452, 2451, 2462, 2485,
     2494, 2475, 2476, 2497, 2511, 2480, 2515, 2513, 2516, 2539,
     2545, 2551, 2550, 2568, 2580, 2529, 2569, 2585, 2579, 2584,

        0,    0, 2076, 2107, 2160, 2206, 2201, 2205, 2268,    0,
     2319, 2327, 2443,    0, 2519, 2538, 2548, 2587, 2575, 2576,
     2579, 2598, 2596,    0, 2606, 2600, 2604,    0,    0, 2606,
     2622, 2609, 2617,    0,    0,    0,    0, 2629, 2630, 2619,
        0,    0, 2636, 2624, 2625, 2639, 2637,    0, 2646, 2628,
     2645, 2649, 2634, 2639, 2641, 2640, 2660,    0, 2657, 2659,
     2659,    0, 2648, 2671,    0, 2673, 2675, 2676, 2678, 2679,
     2688, 2692, 2707, 2691, 2709, 2721, 2730, 2713, 2732, 2746,
     2742, 2743, 2745, 2767, 2771, 2781, 2776, 2797, 2785, 2800,
     2806, 2810, 2815, 2816, 2834, 2821, 2845, 2851, 2840, 2850,

     2855, 2864, 2873, 2901, 2888, 2879, 2889, 2890, 2905, 2914,
     2913, 2919, 2922, 2947, 2938, 2956, 2968, 2959, 2957, 2987,
     2981, 2993, 2990, 2992, 3022, 3005, 3009, 3024, 3030, 3035,
     2677,    0, 2738, 2784, 2825, 2849,    0, 2882, 2909,    0,
        0, 2977,    0,    0,    0, 3018,    0, 3022,    0,    0,
     3013,    0,    0, 3028, 3043,    0, 3039, 3051,    0, 3039,
     3059, 3041,    0, 3065, 3050,    0,    0, 3059, 3063,    0,
     3076, 3079, 3061,    0,    0,    0,    0, 3071, 3080, 3084,
     3089, 3092, 3101, 3106, 3097, 3110, 3114, 3118, 3123, 3149,
     3132, 3146, 3151, 3155, 3160, 3163, 3164, 3168, 3177, 3181,

     3185, 3200, 3189, 3194, 3218, 3223, 3206, 3222, 3231, 3234,
     3235, 3259, 3260, 3248, 3256, 3285, 3273, 3271, 3294, 3313,
     3296, 3288, 3302, 3310, 3324, 3327,    0,    0,    0,    0,
        0, 3099,    0, 3188,    0,    0,    0,    0, 3219,    0,
     3226, 3272,    0,    0, 3310,    0,    0, 3317, 3315, 3323,
     3339,    0, 3342, 3345, 3348, 3350, 3356, 3367, 3359, 3373,
     3364, 3378, 3381, 3382, 3412, 3396, 3404, 3399, 3407, 3413,
     3421, 3418, 3422, 3447, 3453, 3450, 3435, 3452, 3415,    0,
     3446,    0, 3451,    0, 3469, 3455, 3465,    0, 3481, 3484,
     3490, 3486, 3507, 3489, 3519, 3495, 3518, 3524, 3487,    0,

     3511,  130,    0,    0, 3530, 3535, 3549, 3553, 3540, 3541,
        0,    0, 3539, 3558, 3559, 3589, 3555, 3572, 3575, 3584,
     3594, 3595, 3578, 3598,    0, 3603, 3693, 3668, 3672,  158,
     3676, 3680, 3684, 3688
    } ;

static yyconst flex_int16_t yy_def[935] =
    {   0,
      927,    1,  927,    3,  927,  927,  927,  927,  927,  928,
      927,  929,  927,  927,  927,  927,  927,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      931,  931,  927,  931,  932,  931,  933,  931,  931,  931,
      931,  931,  934,  934,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,  927,  927,  928,  929,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,

      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  931,  931,
      931,  932,  933,  931,  931,  931,  931,  931,  931,  931,
      931,  931,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,  927,  927,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,

      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  931,  931,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,

      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,  930,  930,

      930,  930,  930,  930,   54,   54,   54,   54,   54,   54,
      930,  930,  930,   54,   54,   54,  930,   54,  930,   54,
      930,   54,  930,   54,  930,   54,    0,  927,  927,  927,
      927,  927,  927,  927
    } ;

static yyconst flex_int16_t yy_nxt[3760] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   11,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   34,   34,   34,    6,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   34,   34,   34,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   46,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       74,   75,   69,   69,   69,   41,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   69,
       69,   69,   76,   76,   76,   76,   81,   95,   82,   84,
       85,   86,   87,   90,  106,   91,  112,  114,   97,  107,
      120,   92,  113,   93,  121,  115,  125,   96,   94,  138,
      126,   89,   98,  139,   95,   99,  100,  160,   76,  913,
       90,  106,   91,  112,  114,   97,  107,  120,   92,  113,
       93,  121,  115,  125,   96,   94,  138,  126,  116,   98,
      139,  108,   99,  100,  101,  117,  118,  109,  102,  127,

      110,  119,  103,  111,  157,  158,  122,  165,  104,  166,
      123,  105,  338,  128,  245,  116,  124,  244,  108,  129,
      130,  101,  117,  118,  109,  102,  127,  110,  119,  103,
      111,  157,  158,  122,  155,  104,  131,  123,  105,  135,
      128,  245,  156,  124,  132,  338,  129,  130,  133,  246,
      136,  134,  205,  152,  167,  153,  137,  166,  154,   76,
       76,  155,  164,  131,  168,  169,  135,  170,  171,  156,
      337,  132,  173,  173,  244,  133,  246,  136,  134,  205,
      152,  173,  153,  137,  140,  154,  141,  190,  196,  142,
      173,   83,  191,  173,  197,   82,  143,  144,   80,  173,

      173,  173,  145,   76,   76,  209,   84,   85,  173,  210,
      173,  140,  251,  141,  190,  196,  142,  173,  198,  191,
      173,  197,  173,  143,  144,  173,  199,  247,  173,  145,
      146,  147,  209,  260,  148,  248,  210,  173,  149,  251,
      249,  261,  173,  250,  150,  198,  268,  151,  243,  173,
      269,  172,  173,  199,  247,  160,   76,  146,  147,  167,
      260,  148,  248,  168,  169,  149,  164,  249,  261,  173,
      250,  150,  159,  268,  151,  159,  159,  269,  159,  159,
      159,  159,  159,  159,  173,  159,  159,  159,  252,  254,
      256,  174,  257,  175,  204,  270,  255,  275,  161,  176,

      276,  177,  253,  277,  173,  222,  178,   88,   83,  223,
       80,  173,   77,  927,  927,  252,  254,  256,  174,  257,
      175,  204,  270,  255,  275,  173,  176,  276,  177,  253,
      277,  173,  222,  178,  159,  159,  223,  159,  159,  159,
      159,  159,  159,  206,  159,  159,  159,  207,  927,  278,
      258,  179,  173,  208,  927,  173,  279,  239,  241,  242,
      259,  173,  280,  173,  283,  240,  266,  267,  285,  284,
      206,  180,  927,  927,  207,  173,  278,  258,  179,  927,
      208,  173,  173,  279,  239,  241,  242,  259,  173,  280,
      173,  283,  240,  266,  267,  285,  284,  290,  180,  181,

      262,  291,  173,  173,  927,  263,  281,  292,  173,  282,
      927,  264,  293,  182,  298,  927,  183,  184,  265,  294,
      927,  295,  299,  173,  290,  927,  181,  262,  291,  271,
      173,  272,  263,  281,  292,  273,  282,  286,  264,  293,
      182,  298,  274,  183,  184,  265,  294,  287,  295,  299,
      173,  185,  288,  289,  300,  186,  271,  301,  272,  187,
      302,  296,  273,  297,  286,  188,  303,  304,  189,  274,
      305,  306,  307,  308,  287,  173,  927,  927,  185,  288,
      289,  300,  186,  313,  301,  314,  187,  302,  296,  927,
      297,  317,  188,  303,  304,  189,  927,  305,  306,  307,

      308,  309,  173,  173,  311,  310,  315,  192,  318,  312,
      313,  319,  314,  193,  316,  320,  194,  321,  317,  195,
      322,  325,  326,  173,  927,  927,  323,  327,  309,  330,
      173,  311,  310,  315,  192,  318,  312,  324,  319,  331,
      193,  316,  320,  194,  321,  332,  195,  322,  325,  326,
      173,  173,  200,  323,  327,  328,  330,  333,  329,  201,
      202,  335,  336,  173,  324,  203,  331,  927,  431,  432,
      334,  173,  332,  339,  173,  927,  927,  927,  173,  200,
      927,  927,  328,  173,  333,  329,  201,  202,  335,  336,
      173,  173,  203,  927,  173,  431,  432,  334,  173,  211,

      339,  173,  173,  173,  343,  433,  340,  344,  173,  341,
      173,  173,  927,  212,  927,  927,  927,  342,  173,  213,
      214,  173,  173,  173,  927,  927,  211,  434,  173,  173,
      173,  343,  433,  340,  344,  173,  341,  927,  173,  345,
      212,  173,  173,  346,  342,  173,  213,  214,  435,  173,
      173,  173,  215,  436,  434,  173,  437,  347,  438,  927,
      216,  173,  173,  439,  217,  173,  345,  218,  173,  173,
      346,  173,  173,  927,  927,  435,  927,  927,  173,  215,
      436,  440,  441,  437,  347,  438,  173,  216,  173,  173,
      439,  217,  173,  348,  218,  173,  927,  352,  173,  219,

      349,  173,  350,  173,  351,  927,  173,  353,  440,  441,
      220,  927,  927,  173,  927,  173,  221,  173,  354,  173,
      348,  173,  173,  173,  352,  927,  219,  349,  173,  350,
      173,  351,  173,  173,  353,  362,  927,  220,  173,  173,
      927,  173,  173,  221,  173,  354,  173,  355,  173,  442,
      173,  224,  173,  225,  360,  361,  226,  173,  173,  173,
      443,  173,  362,  227,  228,  173,  173,  363,  173,  229,
      364,  444,  173,  173,  355,  927,  442,  173,  224,  173,
      225,  360,  361,  226,  173,  173,  173,  443,  173,  927,
      227,  228,  173,  369,  363,  445,  229,  364,  444,  173,

      173,  230,  231,  173,  173,  232,  173,  173,  447,  233,
      446,  927,  927,  173,  927,  234,  370,  371,  235,  173,
      369,  173,  445,  173,  927,  173,  927,  173,  230,  231,
      173,  173,  232,  173,  173,  447,  233,  446,  372,  173,
      927,  386,  234,  370,  371,  235,  927,  448,  173,  373,
      173,  173,  173,  173,  173,  173,  927,  449,  173,  173,
      450,  173,  236,  173,  237,  372,  173,  238,  386,  375,
      927,  374,  376,  173,  448,  173,  373,  927,  173,  927,
      173,  173,  173,  173,  449,  927,  173,  450,  173,  236,
      173,  237,  927,  173,  238,  173,  375,  385,  374,  376,

      173,  356,  173,  173,  377,  173,  357,  173,  173,  378,
      173,  451,  358,  173,  379,  173,  384,  173,  387,  359,
      173,  452,  173,  173,  385,  173,  927,  173,  356,  453,
      173,  377,  173,  357,  173,  454,  378,  173,  451,  358,
      173,  379,  173,  384,  173,  387,  359,  390,  452,  391,
      173,  173,  173,  365,  173,  366,  453,  455,  927,  367,
      456,  173,  454,  927,  173,  173,  368,  388,  457,  389,
      173,  173,  396,  927,  390,  173,  391,  927,  173,  927,
      365,  173,  366,  392,  455,  173,  367,  456,  173,  927,
      173,  927,  173,  368,  388,  457,  389,  173,  173,  396,

      173,  173,  173,  380,  173,  173,  398,  927,  173,  393,
      392,  397,  173,  381,  173,  173,  394,  173,  382,  383,
      173,  173,  927,  927,  173,  173,  927,  173,  173,  395,
      380,  173,  173,  398,  173,  173,  393,  927,  397,  173,
      381,  173,  173,  394,  173,  382,  383,  173,  173,  399,
      173,  173,  173,  173,  400,  407,  395,  401,  927,  173,
      927,  173,  173,  402,  173,  403,  173,  173,  927,  404,
      173,  173,  927,  173,  927,  173,  399,  173,  408,  173,
      173,  400,  407,  458,  401,  173,  173,  173,  405,  927,
      402,  173,  403,  406,  173,  173,  404,  173,  173,  173,

      173,  173,  173,  173,  927,  408,  173,  927,  409,  459,
      458,  412,  173,  411,  173,  405,  410,  460,  173,  461,
      406,  173,  173,  173,  927,  173,  173,  413,  173,  414,
      173,  173,  173,  173,  415,  409,  459,  173,  412,  927,
      411,  419,  173,  410,  460,  173,  461,  173,  173,  416,
      173,  173,  173,  173,  413,  417,  414,  173,  173,  173,
      173,  415,  173,  927,  173,  927,  418,  173,  419,  173,
      173,  173,  927,  927,  173,  927,  416,  927,  173,  173,
      173,  420,  417,  462,  173,  927,  463,  421,  464,  173,
      173,  173,  173,  418,  173,  927,  422,  173,  173,  423,

      424,  173,  173,  927,  173,  429,  425,  465,  420,  466,
      462,  426,  173,  463,  421,  464,  927,  173,  173,  173,
      173,  173,  173,  422,  173,  173,  423,  424,  173,  173,
      427,  173,  429,  425,  465,  430,  466,  467,  426,  173,
      173,  468,  469,  428,  470,  472,  473,  173,  173,  173,
      173,  173,  173,  474,  471,  475,  476,  427,  477,  478,
      479,  480,  430,  481,  467,  482,  483,  173,  468,  469,
      428,  470,  472,  473,  484,  485,  486,  173,  487,  489,
      474,  471,  475,  476,  490,  477,  478,  479,  480,  491,
      481,  492,  482,  483,  493,  494,  495,  488,  496,  497,

      498,  484,  485,  486,  499,  487,  489,  500,  501,  502,
      503,  490,  504,  505,  508,  506,  491,  507,  492,  509,
      510,  493,  494,  495,  488,  496,  497,  498,  511,  512,
      513,  499,  514,  515,  500,  501,  502,  503,  173,  504,
      505,  508,  506,  516,  507,  927,  509,  510,  173,  517,
      927,  173,  173,  927,  173,  511,  512,  513,  173,  514,
      515,  518,  173,  173,  927,  173,  173,  173,  173,  173,
      516,  173,  173,  521,  173,  173,  517,  519,  173,  173,
      520,  173,  173,  601,  927,  173,  173,  173,  518,  173,
      173,  173,  173,  173,  173,  173,  173,  602,  173,  173,

      521,  173,  173,  522,  519,  173,  524,  520,  523,  173,
      601,  173,  173,  173,  173,  927,  525,  173,  173,  173,
      173,  527,  173,  927,  602,  173,  927,  927,  603,  173,
      522,  526,  173,  524,  604,  523,  530,  173,  173,  173,
      173,  173,  533,  525,  173,  173,  173,  173,  527,  173,
      529,  531,  173,  528,  173,  603,  173,  532,  526,  173,
      534,  604,  173,  530,  173,  173,  173,  173,  173,  533,
      538,  537,  173,  173,  173,  173,  605,  529,  531,  173,
      528,  173,  535,  173,  532,  173,  173,  534,  173,  173,
      173,  606,  173,  173,  539,  173,  173,  538,  537,  536,

      173,  173,  173,  605,  173,  173,  173,  927,  173,  535,
      542,  541,  173,  173,  540,  173,  173,  173,  606,  927,
      173,  539,  173,  173,  173,  607,  536,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  543,  542,  541,  173,
      173,  540,  545,  173,  549,  173,  544,  173,  173,  173,
      546,  173,  607,  927,  173,  173,  173,  173,  173,  173,
      173,  173,  548,  543,  173,  173,  173,  547,  173,  545,
      173,  549,  173,  544,  608,  173,  173,  546,  173,  552,
      551,  173,  553,  550,  173,  173,  173,  609,  173,  548,
      173,  173,  173,  554,  547,  173,  173,  173,  555,  173,

      927,  608,  173,  927,  173,  173,  552,  551,  556,  553,
      550,  173,  557,  173,  609,  173,  173,  173,  173,  610,
      554,  173,  173,  173,  173,  555,  173,  560,  927,  173,
      558,  173,  173,  927,  563,  556,  561,  559,  173,  557,
      173,  173,  173,  173,  927,  173,  610,  173,  173,  173,
      173,  173,  173,  927,  560,  562,  173,  558,  173,  173,
      173,  563,  564,  561,  559,  173,  565,  927,  173,  173,
      173,  173,  173,  927,  173,  570,  173,  173,  611,  173,
      173,  612,  562,  173,  571,  173,  173,  173,  566,  564,
      613,  173,  173,  565,  173,  173,  173,  173,  173,  173,

      569,  567,  570,  173,  173,  611,  173,  173,  612,  568,
      927,  571,  927,  173,  173,  566,  173,  613,  173,  173,
      572,  173,  173,  173,  173,  173,  173,  569,  567,  173,
      173,  173,  579,  173,  574,  927,  568,  575,  576,  573,
      173,  173,  580,  173,  173,  173,  173,  572,  581,  173,
      173,  173,  173,  173,  577,  578,  173,  173,  173,  579,
      173,  574,  173,  173,  575,  576,  573,  173,  173,  580,
      927,  173,  173,  173,  173,  581,  173,  173,  173,  927,
      614,  577,  578,  173,  173,  173,  173,  173,  173,  173,
      173,  927,  582,  927,  173,  173,  173,  173,  927,  583,

      585,  173,  173,  584,  173,  173,  173,  614,  173,  586,
      173,  173,  588,  173,  173,  173,  173,  173,  589,  582,
      173,  173,  173,  173,  173,  587,  583,  585,  173,  173,
      584,  173,  615,  173,  173,  173,  586,  590,  173,  588,
      173,  173,  173,  173,  173,  589,  173,  173,  173,  173,
      173,  595,  587,  927,  616,  173,  591,  617,  592,  615,
      593,  173,  173,  927,  590,  173,  173,  173,  594,  173,
      173,  927,  173,  173,  173,  173,  173,  173,  595,  927,
      173,  616,  927,  591,  617,  592,  618,  593,  927,  173,
      596,  598,  173,  173,  173,  594,  173,  173,  597,  173,

      173,  173,  173,  173,  619,  620,  173,  173,  621,  600,
      622,  623,  624,  618,  625,  599,  626,  596,  598,  173,
      627,  173,  173,  173,  628,  597,  173,  173,  629,  173,
      630,  619,  620,  173,  631,  621,  600,  622,  623,  624,
      633,  625,  599,  626,  634,  632,  635,  627,  636,  173,
      637,  628,  638,  173,  639,  629,  640,  630,  641,  642,
      643,  631,  644,  645,  646,  647,  648,  633,  649,  650,
      651,  634,  632,  635,  652,  636,  653,  637,  654,  638,
      655,  639,  656,  640,  657,  641,  642,  643,  658,  644,
      645,  646,  647,  648,  659,  649,  650,  651,  660,  661,

      662,  652,  663,  653,  664,  654,  665,  655,  173,  656,
      173,  657,  927,  927,  731,  658,  670,  927,  173,  173,
      927,  659,  927,  666,  732,  660,  661,  662,  668,  663,
      173,  664,  667,  665,  173,  173,  173,  173,  173,  173,
      671,  731,  927,  670,  173,  173,  173,  669,  173,  173,
      666,  732,  173,  927,  173,  668,  672,  173,  173,  667,
      173,  173,  673,  173,  173,  173,  173,  671,  173,  173,
      173,  173,  173,  674,  669,  173,  173,  733,  173,  173,
      173,  173,  173,  672,  675,  173,  173,  173,  173,  673,
      173,  173,  927,  676,  927,  173,  173,  173,  677,  173,

      674,  173,  173,  678,  733,  173,  173,  173,  173,  173,
      679,  675,  927,  173,  173,  173,  680,  173,  173,  173,
      676,  173,  734,  681,  173,  677,  927,  735,  173,  173,
      678,  682,  736,  173,  173,  173,  173,  679,  173,  173,
      173,  173,  173,  680,  173,  173,  173,  683,  173,  734,
      681,  173,  173,  684,  735,  686,  173,  927,  682,  736,
      173,  173,  173,  173,  173,  173,  173,  173,  685,  173,
      927,  173,  173,  687,  683,  927,  173,  173,  173,  173,
      684,  173,  686,  173,  173,  737,  688,  173,  927,  173,
      173,  173,  689,  927,  173,  685,  173,  173,  173,  173,

      687,  173,  173,  173,  173,  173,  173,  173,  173,  927,
      173,  173,  737,  688,  173,  690,  173,  173,  173,  689,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      691,  692,  927,  173,  173,  693,  173,  173,  173,  173,
      173,  173,  690,  173,  927,  173,  738,  173,  173,  173,
      927,  739,  694,  173,  173,  927,  173,  691,  692,  173,
      173,  695,  693,  173,  173,  173,  173,  173,  173,  173,
      173,  696,  173,  738,  173,  173,  173,  698,  739,  694,
      173,  700,  697,  173,  173,  173,  173,  173,  695,  173,
      173,  173,  173,  701,  173,  173,  173,  173,  696,  173,

      699,  173,  173,  173,  698,  173,  173,  173,  700,  697,
      173,  173,  173,  173,  705,  703,  173,  173,  927,  173,
      701,  173,  173,  704,  702,  173,  173,  699,  927,  173,
      173,  927,  173,  173,  173,  173,  927,  173,  173,  173,
      173,  705,  703,  173,  173,  173,  708,  927,  706,  173,
      704,  702,  173,  173,  927,  173,  707,  173,  173,  173,
      740,  173,  173,  173,  173,  173,  173,  927,  173,  173,
      173,  173,  173,  708,  709,  706,  710,  711,  173,  173,
      173,  712,  173,  707,  927,  173,  173,  740,  173,  173,
      173,  173,  173,  716,  713,  173,  173,  719,  173,  173,

      173,  709,  173,  710,  711,  173,  173,  173,  712,  715,
      714,  173,  173,  173,  173,  173,  173,  173,  717,  173,
      716,  713,  173,  927,  719,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  927,  715,  714,  173,  173,
      173,  173,  720,  718,  173,  717,  728,  721,  173,  173,
      173,  741,  173,  173,  722,  173,  173,  173,  173,  173,
      173,  173,  173,  725,  742,  743,  173,  173,  173,  720,
      718,  723,  927,  728,  721,  173,  173,  173,  741,  173,
      173,  722,  173,  173,  724,  173,  173,  173,  173,  173,
      725,  742,  743,  173,  173,  173,  730,  173,  723,  727,

      726,  173,  173,  173,  744,  173,  173,  745,  746,  173,
      747,  724,  173,  173,  173,  173,  173,  173,  729,  748,
      749,  173,  173,  730,  173,  750,  727,  726,  173,  173,
      751,  744,  173,  173,  745,  746,  752,  747,  753,  754,
      755,  756,  757,  173,  173,  729,  748,  749,  173,  173,
      758,  759,  750,  760,  761,  762,  763,  751,  764,  765,
      766,  767,  768,  752,  769,  753,  754,  755,  756,  757,
      770,  771,  772,  773,  774,  775,  776,  758,  759,  777,
      760,  761,  762,  763,  778,  764,  765,  766,  767,  768,
      173,  769,  173,  173,  827,  780,  781,  770,  771,  772,

      773,  774,  775,  776,  782,  173,  777,  927,  785,  173,
      173,  778,  173,  173,  779,  173,  173,  173,  783,  173,
      173,  827,  780,  781,  173,  173,  173,  927,  173,  173,
      788,  782,  173,  927,  784,  785,  173,  173,  173,  173,
      173,  779,  173,  173,  173,  783,  173,  173,  786,  173,
      173,  173,  173,  173,  787,  173,  173,  788,  173,  173,
      791,  784,  792,  173,  828,  173,  927,  173,  790,  173,
      927,  173,  927,  173,  173,  786,  173,  173,  789,  173,
      173,  787,  173,  173,  173,  173,  173,  791,  173,  792,
      173,  828,  927,  173,  173,  790,  173,  796,  173,  793,

      927,  829,  173,  794,  173,  789,  173,  173,  173,  173,
      173,  173,  795,  173,  173,  173,  927,  173,  173,  798,
      173,  797,  173,  173,  796,  173,  793,  173,  829,  173,
      794,  173,  173,  173,  173,  173,  799,  173,  802,  795,
      173,  173,  800,  173,  173,  173,  798,  173,  797,  173,
      173,  173,  173,  173,  173,  927,  830,  173,  173,  173,
      173,  173,  173,  799,  173,  802,  801,  173,  173,  800,
      173,  173,  173,  831,  173,  804,  803,  173,  173,  173,
      173,  173,  173,  830,  173,  173,  805,  173,  173,  173,
      173,  927,  173,  801,  173,  173,  173,  832,  173,  173,

      831,  173,  804,  803,  173,  173,  173,  808,  173,  173,
      173,  927,  927,  805,  173,  173,  173,  173,  173,  173,
      807,  806,  173,  173,  832,  173,  173,  173,  173,  927,
      811,  173,  173,  173,  808,  809,  173,  173,  173,  173,
      812,  833,  173,  173,  810,  173,  927,  807,  806,  173,
      173,  173,  173,  173,  173,  173,  173,  811,  173,  173,
      813,  927,  809,  173,  173,  173,  173,  812,  833,  173,
      814,  810,  815,  173,  173,  173,  173,  173,  173,  927,
      927,  816,  173,  173,  173,  173,  173,  813,  818,  817,
      927,  173,  834,  173,  173,  927,  173,  814,  173,  815,

      173,  173,  173,  173,  173,  173,  821,  173,  816,  822,
      173,  173,  173,  820,  927,  818,  817,  819,  173,  834,
      173,  173,  824,  173,  173,  173,  173,  173,  927,  173,
      173,  173,  173,  821,  173,  835,  822,  173,  823,  173,
      820,  173,  173,  826,  819,  173,  173,  173,  836,  824,
      837,  173,  173,  173,  173,  825,  173,  173,  838,  173,
      839,  173,  835,  840,  841,  823,  173,  173,  173,  173,
      826,  842,  173,  173,  173,  836,  843,  837,  844,  173,
      845,  846,  825,  847,  848,  838,  173,  839,  173,  849,
      840,  841,  850,  851,  173,  852,  927,  853,  842,  173,

      927,  173,  927,  843,  927,  844,  173,  845,  846,  855,
      847,  848,  879,  927,  173,  854,  849,  173,  173,  850,
      851,  173,  852,  173,  853,  858,  173,  173,  173,  173,
      857,  173,  856,  173,  173,  173,  855,  927,  173,  879,
      173,  173,  854,  173,  173,  173,  859,  173,  173,  173,
      173,  173,  858,  173,  173,  173,  173,  857,  173,  856,
      173,  173,  173,  173,  860,  173,  173,  173,  173,  173,
      173,  927,  861,  859,  173,  927,  173,  173,  173,  927,
      173,  173,  173,  173,  927,  173,  173,  173,  173,  862,
      173,  860,  173,  173,  173,  173,  173,  173,  173,  861,

      173,  173,  173,  927,  173,  173,  865,  173,  173,  927,
      173,  173,  173,  173,  863,  173,  862,  173,  173,  173,
      880,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      864,  173,  173,  865,  881,  173,  867,  173,  173,  173,
      173,  863,  866,  173,  173,  173,  927,  880,  869,  173,
      173,  173,  173,  173,  868,  173,  882,  864,  173,  173,
      173,  881,  173,  867,  173,  173,  173,  173,  173,  866,
      173,  870,  173,  173,  871,  869,  173,  173,  173,  173,
      927,  868,  173,  882,  927,  173,  173,  173,  173,  883,
      173,  872,  173,  173,  874,  173,  173,  173,  870,  173,

      173,  871,  173,  173,  173,  173,  927,  875,  173,  873,
      173,  173,  173,  173,  927,  173,  883,  173,  872,  173,
      173,  874,  173,  173,  173,  173,  876,  173,  877,  173,
      173,  173,  173,  173,  875,  173,  873,  173,  173,  173,
      173,  173,  884,  885,  173,  886,  173,  173,  887,  173,
      173,  878,  173,  876,  173,  877,  888,  173,  173,  173,
      173,  173,  173,  927,  173,  173,  173,  173,  173,  884,
      885,  173,  886,  173,  173,  887,  173,  173,  878,  173,
      889,  173,  173,  888,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  927,  173,  173,

      173,  173,  927,  173,  173,  890,  173,  889,  173,  173,
      173,  173,  173,  173,  173,  173,  893,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  891,  173,  173,
      173,  173,  890,  173,  892,  173,  173,  173,  173,  173,
      173,  173,  173,  893,  173,  173,  173,  899,  173,  173,
      173,  173,  898,  894,  891,  173,  173,  173,  173,  173,
      173,  892,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  895,  899,  897,  173,  173,  900,  898,
      894,  901,  173,  896,  173,  173,  173,  173,  902,  173,
      173,  173,  903,  904,  173,  927,  173,  173,  173,  173,

      895,  173,  897,  173,  911,  900,  173,  173,  901,  927,
      896,  173,  173,  905,  173,  902,  173,  173,  173,  903,
      904,  173,  906,  173,  173,  173,  173,  173,  173,  927,
      173,  911,  909,  173,  173,  173,  173,  907,  908,  173,
      905,  173,  912,  927,  173,  173,  910,  914,  173,  906,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  909,
      917,  173,  173,  173,  907,  908,  173,  173,  173,  912,
      173,  173,  173,  910,  914,  173,  173,  173,  173,  173,
      915,  919,  173,  173,  173,  173,  173,  917,  173,  173,
      173,  921,  916,  173,  173,  173,  173,  173,  920,  173,

      922,  173,  173,  173,  173,  173,  173,  915,  919,  173,
      918,  923,  924,  173,  925,  173,  173,  173,  921,  927,
      173,  173,  173,  173,  927,  920,  173,  922,  173,  927,
      927,  927,  173,  173,  926,  173,  173,  918,  923,  924,
      173,  925,  173,  927,  927,  927,  927,  173,  173,  927,
      927,  927,  927,  173,  927,  927,  927,  927,  927,  173,
      927,  926,  173,  927,  927,  927,  927,  173,   78,  927,
      927,   78,   79,  927,   79,   79,  159,  927,  159,  159,
      162,  927,  162,  162,  163,  927,  163,  163,  173,  927,
      173,  173,    5,  927,  927,  927,  927,  927,  927,  927,

      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927
    } ;

static yyconst flex_int16_t yy_chk[3760] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    7,    7,    8,    8,   13,   19,   13,   15,
       15,   16,   16,   18,   22,   18,   24,   25,   20,   22,
       27,   18,   24,   18,   28,   25,   30,   19,   18,   35,
       30,  930,   20,   35,   19,   20,   20,   42,   42,  902,
       18,   22,   18,   24,   25,   20,   22,   27,   18,   24,
       18,   28,   25,   30,   19,   18,   35,   30,   26,   20,
       35,   23,   20,   20,   21,   26,   26,   23,   21,   31,

       23,   26,   21,   23,   40,   40,   29,   48,   21,   48,
       29,   21,  338,   31,   90,   26,   29,  244,   23,   31,
       31,   21,   26,   26,   23,   21,   31,   23,   26,   21,
       23,   40,   40,   29,   39,   21,   32,   29,   21,   33,
       31,   90,   39,   29,   32,  168,   31,   31,   32,   91,
       33,   32,   63,   38,  167,   38,   33,  166,   38,   43,
       43,   39,  163,   32,   50,   50,   33,   51,   51,   39,
      162,   32,   63,   57,   84,   32,   91,   33,   32,   63,
       38,   59,   38,   33,   36,   38,   36,   57,   59,   36,
       69,   83,   57,   57,   59,   82,   36,   36,   79,   63,

       57,   59,   36,   76,   76,   65,   85,   85,   59,   65,
       69,   36,   94,   36,   57,   59,   36,   69,   60,   57,
       57,   59,   60,   36,   36,   65,   60,   92,   59,   36,
       37,   37,   65,  100,   37,   92,   65,   69,   37,   94,
       93,  101,   60,   93,   37,   60,  104,   37,   78,   60,
      105,   52,   65,   60,   92,  160,  160,   37,   37,   49,
      100,   37,   92,  169,  169,   37,   47,   93,  101,   60,
       93,   37,   45,  104,   37,   53,   53,  105,   53,   53,
       53,   53,   53,   53,   62,   53,   53,   53,   95,   97,
       98,   53,   98,   53,   62,  106,   97,  108,   44,   53,

      109,   53,   95,  110,   62,   70,   53,   17,   14,   70,
       12,   62,    9,    5,    0,   95,   97,   98,   53,   98,
       53,   62,  106,   97,  108,   70,   53,  109,   53,   95,
      110,   62,   70,   53,   54,   54,   70,   54,   54,   54,
       54,   54,   54,   64,   54,   54,   54,   64,    0,  111,
       99,   54,   70,   64,    0,   75,  112,   74,   75,   75,
       99,   74,  113,   64,  115,   74,  103,  103,  117,  115,
       64,   54,    0,    0,   64,   75,  111,   99,   54,    0,
       64,   74,   75,  112,   74,   75,   75,   99,   74,  113,
       64,  115,   74,  103,  103,  117,  115,  119,   54,   55,

      102,  120,   75,   55,    0,  102,  114,  121,   74,  114,
        0,  102,  122,   55,  125,    0,   55,   55,  102,  123,
        0,  123,  126,   55,  119,    0,   55,  102,  120,  107,
       55,  107,  102,  114,  121,  107,  114,  118,  102,  122,
       55,  125,  107,   55,   55,  102,  123,  118,  123,  126,
       55,   56,  118,  118,  127,   56,  107,  128,  107,   56,
      129,  124,  107,  124,  118,   56,  130,  131,   56,  107,
      133,  134,  135,  136,  118,   56,    0,    0,   56,  118,
      118,  127,   56,  139,  128,  140,   56,  129,  124,    0,
      124,  142,   56,  130,  131,   56,    0,  133,  134,  135,

      136,  137,   56,   58,  138,  137,  141,   58,  143,  138,
      139,  144,  140,   58,  141,  145,   58,  146,  142,   58,
      147,  149,  150,   58,    0,    0,  148,  151,  137,  153,
       58,  138,  137,  141,   58,  143,  138,  148,  144,  154,
       58,  141,  145,   58,  146,  155,   58,  147,  149,  150,
       58,   61,   61,  148,  151,  152,  153,  156,  152,   61,
       61,  157,  158,  173,  148,   61,  154,    0,  246,  248,
      156,   61,  155,  174,  174,    0,    0,    0,   61,   61,
        0,    0,  152,  173,  156,  152,   61,   61,  157,  158,
      173,  175,   61,    0,  174,  246,  248,  156,   61,   66,

      174,  174,  176,   66,  177,  249,  175,  177,  177,  176,
      173,  175,    0,   66,    0,    0,    0,  176,  175,   66,
       66,  174,  176,   66,    0,    0,   66,  252,  177,  176,
       66,  177,  249,  175,  177,  177,  176,    0,  175,  178,
       66,  178,  179,  179,  176,  180,   66,   66,  253,  176,
       66,   67,   67,  254,  252,  177,  255,  179,  256,    0,
       67,  178,  179,  257,   67,  180,  178,   67,  178,  179,
      179,   67,  180,    0,    0,  253,    0,    0,   67,   67,
      254,  258,  259,  255,  179,  256,  181,   67,  178,  179,
      257,   67,  180,  181,   67,  182,    0,  183,   67,   68,

      181,  184,  182,   68,  182,    0,  181,  183,  258,  259,
       68,    0,    0,  181,    0,  182,   68,  183,  184,  188,
      181,  184,  182,   68,  183,    0,   68,  181,  184,  182,
       68,  182,  185,  181,  183,  188,    0,   68,  200,  188,
        0,  187,  182,   68,  183,  184,  188,  185,  184,  261,
       68,   71,  185,   71,  187,  187,   71,  189,  200,  185,
      262,  187,  188,   71,   71,  200,  188,  189,  187,   71,
      190,  263,  190,   71,  185,    0,  261,  189,   71,  185,
       71,  187,  187,   71,  189,  200,  192,  262,  187,    0,
       71,   71,  190,  192,  189,  264,   71,  190,  263,  190,

       71,   72,   72,  193,  189,   72,  192,  194,  265,   72,
      264,    0,    0,  192,    0,   72,  193,  194,   72,  190,
      192,  205,  264,  193,    0,   72,    0,  194,   72,   72,
      193,  195,   72,  192,  194,  265,   72,  264,  195,  196,
        0,  205,   72,  193,  194,   72,    0,  266,  205,  196,
      193,  195,   72,   73,  194,  198,    0,  267,  195,  196,
      268,  197,   73,  216,   73,  195,  196,   73,  205,  198,
        0,  197,  198,   73,  266,  198,  196,    0,  195,    0,
       73,  197,  198,  216,  267,    0,  196,  268,  197,   73,
      216,   73,    0,  204,   73,  199,  198,  204,  197,  198,

       73,  186,  198,  201,  199,  186,  186,  203,  197,  199,
      216,  269,  186,  204,  201,  199,  203,  206,  206,  186,
      204,  270,  199,  201,  204,  186,    0,  203,  186,  271,
      201,  199,  186,  186,  203,  272,  199,  206,  269,  186,
      204,  201,  199,  203,  206,  206,  186,  208,  270,  208,
      201,  208,  186,  191,  203,  191,  271,  273,    0,  191,
      274,  207,  272,    0,  206,  213,  191,  207,  275,  207,
      209,  208,  213,    0,  208,  191,  208,    0,  208,    0,
      191,  207,  191,  209,  273,  213,  191,  274,  207,    0,
      209,    0,  213,  191,  207,  275,  207,  209,  208,  213,

      210,  211,  191,  202,  202,  215,  215,    0,  207,  210,
      209,  214,  213,  202,  212,  214,  211,  209,  202,  202,
      210,  211,    0,    0,  202,  215,    0,  210,  211,  212,
      202,  202,  215,  215,  212,  214,  210,    0,  214,  218,
      202,  212,  214,  211,  219,  202,  202,  210,  211,  217,
      217,  202,  215,  223,  218,  223,  212,  219,    0,  218,
        0,  212,  214,  220,  219,  221,  218,  220,    0,  221,
      217,  219,    0,  223,    0,  224,  217,  217,  224,  222,
      223,  218,  223,  277,  219,  221,  218,  220,  222,    0,
      220,  219,  221,  222,  220,  224,  221,  217,  227,  222,

      223,  225,  224,  226,    0,  224,  222,    0,  225,  278,
      277,  227,  221,  226,  220,  222,  225,  279,  227,  280,
      222,  225,  224,  226,    0,  227,  222,  228,  225,  229,
      226,  228,  229,  233,  230,  225,  278,  230,  227,    0,
      226,  233,  231,  225,  279,  227,  280,  232,  225,  231,
      226,  228,  229,  233,  228,  232,  229,  230,  228,  229,
      233,  230,  231,    0,  230,    0,  232,  232,  233,  231,
      234,  235,    0,    0,  232,    0,  231,    0,  228,  229,
      233,  234,  232,  281,  230,    0,  282,  235,  283,  231,
      234,  235,  236,  232,  232,    0,  236,  234,  235,  236,

      237,  237,  238,    0,  239,  241,  238,  284,  234,  285,
      281,  239,  236,  282,  235,  283,    0,  234,  235,  236,
      242,  237,  238,  236,  239,  241,  236,  237,  237,  238,
      240,  239,  241,  238,  284,  242,  285,  286,  239,  236,
      242,  287,  288,  240,  289,  290,  291,  242,  237,  238,
      240,  239,  241,  293,  289,  294,  295,  240,  296,  297,
      298,  299,  242,  300,  286,  302,  303,  242,  287,  288,
      240,  289,  290,  291,  304,  305,  306,  240,  307,  308,
      293,  289,  294,  295,  309,  296,  297,  298,  299,  310,
      300,  311,  302,  303,  312,  313,  314,  307,  315,  317,

      318,  304,  305,  306,  319,  307,  308,  320,  321,  323,
      324,  309,  325,  327,  329,  328,  310,  328,  311,  330,
      331,  312,  313,  314,  307,  315,  317,  318,  332,  333,
      334,  319,  335,  336,  320,  321,  323,  324,  339,  325,
      327,  329,  328,  340,  328,    0,  330,  331,  341,  342,
        0,  344,  345,    0,  343,  332,  333,  334,  339,  335,
      336,  343,  347,  340,    0,  339,  348,  346,  341,  342,
      340,  344,  345,  348,  343,  341,  342,  346,  344,  345,
      347,  343,  347,  431,    0,  339,  348,  346,  343,  347,
      340,  351,  350,  348,  346,  341,  342,  432,  344,  345,

      348,  343,  354,  349,  346,  349,  351,  347,  350,  347,
      431,  351,  350,  348,  346,    0,  352,  353,  351,  350,
      352,  355,  354,    0,  432,  349,    0,    0,  433,  354,
      349,  353,  349,  351,  434,  350,  358,  353,  351,  350,
      352,  355,  360,  352,  353,  361,  356,  352,  355,  354,
      357,  358,  349,  356,  357,  433,  358,  359,  353,  359,
      361,  434,  360,  358,  353,  361,  356,  352,  355,  360,
      365,  364,  361,  356,  357,  364,  435,  357,  358,  359,
      356,  357,  362,  358,  359,  362,  359,  361,  363,  360,
      365,  437,  361,  356,  366,  364,  366,  365,  364,  363,

      367,  357,  364,  435,  368,  362,  359,    0,  363,  362,
      369,  368,  362,  370,  367,  363,  366,  365,  437,    0,
      367,  366,  364,  366,  368,  438,  363,  367,  371,  377,
      369,  368,  362,  370,  374,  363,  371,  369,  368,  372,
      370,  367,  373,  366,  377,  373,  372,  367,  371,  377,
      374,  368,  438,    0,  374,  371,  377,  369,  376,  372,
      370,  374,  376,  371,  375,  373,  372,  375,  378,  373,
      379,  377,  373,  372,  439,  371,  377,  374,  376,  380,
      379,  374,  381,  378,  375,  376,  372,  440,  378,  376,
      379,  375,  373,  382,  375,  378,  384,  379,  383,  380,

        0,  439,  381,    0,  386,  376,  380,  379,  383,  381,
      378,  375,  384,  382,  440,  378,  384,  379,  383,  441,
      382,  385,  387,  384,  386,  383,  380,  388,    0,  381,
      385,  386,  389,    0,  391,  383,  389,  387,  391,  384,
      382,  385,  387,  384,    0,  383,  441,  388,  385,  387,
      393,  386,  389,    0,  388,  390,  390,  385,  391,  389,
      392,  391,  392,  389,  387,  391,  393,    0,  385,  387,
      393,  395,  394,    0,  388,  399,  390,  393,  443,  389,
      392,  444,  390,  390,  400,  391,  398,  392,  394,  392,
      445,  395,  394,  393,  396,  399,  397,  393,  395,  394,

      398,  396,  399,  390,  400,  443,  398,  392,  444,  397,
        0,  400,    0,  398,  396,  394,  397,  445,  395,  394,
      401,  396,  399,  397,  401,  402,  403,  398,  396,  407,
      404,  400,  407,  398,  402,    0,  397,  403,  404,  401,
      406,  396,  408,  397,  401,  402,  403,  401,  409,  407,
      404,  401,  402,  403,  405,  406,  407,  404,  405,  407,
      406,  402,  408,  410,  403,  404,  401,  406,  409,  408,
        0,  401,  402,  403,  411,  409,  407,  404,  405,    0,
      446,  405,  406,  410,  412,  405,  414,  406,  413,  408,
      410,    0,  411,    0,  411,  409,  416,  418,    0,  412,

      414,  411,  415,  413,  412,  405,  414,  446,  413,  415,
      410,  412,  418,  414,  417,  413,  416,  418,  419,  411,
      420,  411,  415,  416,  418,  417,  412,  414,  421,  415,
      413,  412,  448,  414,  417,  413,  415,  421,  419,  418,
      420,  417,  425,  416,  418,  419,  422,  420,  421,  415,
      423,  425,  417,    0,  449,  421,  422,  450,  422,  448,
      423,  417,  425,    0,  421,  419,  422,  420,  424,  425,
      423,    0,  424,  422,  426,  421,  428,  423,  425,    0,
      427,  449,    0,  422,  450,  422,  452,  423,    0,  425,
      426,  428,  424,  422,  426,  424,  428,  423,  427,  424,

      427,  426,  429,  428,  453,  454,  430,  427,  455,  430,
      456,  460,  461,  452,  463,  429,  465,  426,  428,  424,
      466,  426,  429,  428,  467,  427,  430,  427,  468,  429,
      469,  453,  454,  430,  470,  455,  430,  456,  460,  461,
      472,  463,  429,  465,  476,  470,  478,  466,  479,  429,
      480,  467,  481,  430,  483,  468,  484,  469,  485,  486,
      487,  470,  490,  491,  492,  493,  494,  472,  495,  496,
      498,  476,  470,  478,  499,  479,  500,  480,  501,  481,
      502,  483,  504,  484,  505,  485,  486,  487,  506,  490,
      491,  492,  493,  494,  507,  495,  496,  498,  508,  509,

      510,  499,  511,  500,  513,  501,  514,  502,  518,  504,
      516,  505,    0,    0,  603,  506,  520,    0,  521,  517,
        0,  507,    0,  516,  604,  508,  509,  510,  518,  511,
      516,  513,  517,  514,  519,  518,  520,  516,  521,  517,
      522,  603,    0,  520,  522,  521,  517,  519,  523,  524,
      516,  604,  527,    0,  519,  518,  523,  516,  525,  517,
      532,  519,  524,  520,  522,  521,  517,  522,  523,  524,
      526,  522,  527,  525,  519,  523,  524,  605,  525,  527,
      532,  519,  529,  523,  526,  525,  528,  532,  530,  524,
      526,  522,    0,  528,    0,  523,  524,  526,  529,  527,

      525,  536,  529,  530,  605,  525,  528,  532,  530,  529,
      531,  526,    0,  528,  531,  530,  533,  526,  533,  534,
      528,  536,  606,  534,  535,  529,    0,  607,  536,  529,
      530,  535,  608,  528,  531,  530,  537,  531,  533,  534,
      540,  531,  538,  533,  535,  533,  534,  537,  536,  606,
      534,  535,  539,  538,  607,  540,  537,    0,  535,  608,
      540,  531,  538,  537,  542,  533,  534,  540,  539,  538,
        0,  535,  539,  541,  537,    0,  543,  541,  544,  539,
      538,  546,  540,  537,  542,  609,  545,  540,    0,  538,
      545,  542,  546,    0,  547,  539,  543,  541,  544,  539,

      541,  546,  549,  543,  541,  544,  548,  556,  546,    0,
      545,  542,  609,  545,  547,  548,  552,  545,  551,  546,
      550,  547,  549,  543,  541,  544,  548,  556,  546,  549,
      550,  551,    0,  548,  556,  552,  552,  545,  551,  553,
      550,  547,  548,  552,    0,  551,  611,  550,  554,  549,
        0,  612,  553,  548,  556,    0,  558,  550,  551,  553,
      559,  554,  552,  552,  560,  551,  553,  550,  554,  555,
      557,  555,  562,  611,  563,  554,  558,  557,  612,  553,
      559,  563,  555,  558,  560,  561,  553,  559,  554,  555,
      557,  560,  562,  564,  563,  554,  555,  557,  555,  562,

      561,  563,  566,  558,  557,  561,  567,  559,  563,  555,
      565,  560,  561,  564,  569,  566,  555,  557,    0,  562,
      564,  563,  566,  568,  565,  568,  567,  561,    0,  566,
      565,    0,  561,  567,  569,  570,    0,  565,  572,  573,
      564,  569,  566,  571,  574,  568,  572,    0,  570,  566,
      568,  565,  568,  567,    0,  570,  571,  565,  572,  573,
      613,  569,  570,  571,  574,  572,  573,    0,  578,  577,
      571,  574,  568,  572,  575,  570,  576,  577,  575,  579,
      576,  578,  570,  571,    0,  572,  573,  613,  578,  577,
      571,  574,  582,  583,  579,  578,  577,  586,  575,  579,

      576,  575,  580,  576,  577,  575,  579,  576,  578,  581,
      580,  581,  582,  583,  584,  578,  577,  586,  584,  582,
      583,  579,  580,    0,  586,  575,  579,  576,  585,  580,
      588,  581,  587,  589,  584,    0,  581,  580,  581,  582,
      583,  584,  587,  585,  586,  584,  596,  589,  585,  580,
      588,  615,  587,  589,  590,  585,  590,  588,  581,  587,
      589,  584,  591,  593,  616,  617,  596,  593,  592,  587,
      585,  591,    0,  596,  589,  585,  590,  588,  615,  587,
      589,  590,  591,  590,  592,  594,  597,  593,  592,  591,
      593,  616,  617,  596,  593,  592,  599,  595,  591,  595,

      594,  600,  598,  590,  618,  594,  597,  619,  620,  591,
      621,  592,  594,  597,  593,  592,  599,  595,  598,  622,
      623,  600,  598,  599,  595,  625,  595,  594,  600,  598,
      626,  618,  594,  597,  619,  620,  627,  621,  630,  631,
      632,  633,  638,  599,  595,  598,  622,  623,  600,  598,
      639,  640,  625,  643,  644,  645,  646,  626,  647,  649,
      650,  651,  652,  627,  653,  630,  631,  632,  633,  638,
      654,  655,  656,  657,  659,  660,  661,  639,  640,  663,
      643,  644,  645,  646,  664,  647,  649,  650,  651,  652,
      666,  653,  667,  668,  731,  669,  670,  654,  655,  656,

      657,  659,  660,  661,  671,  671,  663,    0,  674,  672,
      666,  664,  667,  668,  668,  669,  670,  666,  672,  667,
      668,  731,  669,  670,  673,  671,  675,    0,  674,  672,
      678,  671,  671,    0,  673,  674,  672,  666,  676,  667,
      668,  668,  669,  670,  673,  672,  675,  677,  676,  679,
      678,  673,  671,  675,  677,  674,  672,  678,  676,  681,
      682,  673,  683,  680,  733,  676,    0,  677,  681,  679,
        0,  673,    0,  675,  677,  676,  679,  678,  680,  681,
      682,  677,  683,  680,  684,  676,  681,  682,  685,  683,
      680,  733,    0,  687,  677,  681,  679,  687,  686,  684,

        0,  734,  689,  685,  684,  680,  681,  682,  685,  683,
      680,  684,  686,  687,  688,  685,    0,  690,  686,  690,
      687,  688,  689,  691,  687,  686,  684,  692,  734,  689,
      685,  684,  693,  694,  688,  685,  691,  690,  696,  686,
      687,  688,  692,  691,  690,  686,  690,  692,  688,  689,
      691,  695,  693,  694,  692,    0,  735,  699,  696,  693,
      694,  688,  697,  691,  690,  696,  695,  700,  698,  692,
      691,  695,  701,  736,  692,  698,  697,  699,  695,  693,
      694,  702,  697,  735,  699,  696,  703,  700,  698,  697,
      703,    0,  701,  695,  700,  698,  706,  738,  695,  701,

      736,  702,  698,  697,  699,  705,  707,  708,  702,  697,
      703,    0,    0,  703,  700,  698,  706,  703,  704,  701,
      705,  704,  709,  706,  738,  705,  707,  708,  702,    0,
      711,  710,  705,  707,  708,  709,  712,  703,  704,  713,
      712,  739,  709,  706,  710,  704,    0,  705,  704,  709,
      711,  710,  705,  707,  708,  715,  712,  711,  710,  713,
      714,    0,  709,  712,  714,  704,  713,  712,  739,  709,
      715,  710,  716,  716,  719,  715,  718,  711,  710,    0,
        0,  717,  715,  712,  714,  717,  713,  714,  719,  718,
        0,  714,  742,  716,  719,    0,  718,  715,  721,  716,

      716,  719,  715,  718,  720,  717,  722,  723,  717,  724,
      722,  714,  717,  721,    0,  719,  718,  720,  721,  742,
      716,  719,  726,  718,  720,  721,  727,  723,    0,  724,
      722,  720,  717,  722,  723,  746,  724,  722,  725,  725,
      721,  728,  726,  729,  720,  721,  727,  729,  748,  726,
      751,  720,  730,  727,  723,  728,  724,  722,  754,  725,
      755,  728,  746,  757,  758,  725,  725,  729,  728,  726,
      729,  760,  730,  727,  729,  748,  761,  751,  762,  730,
      764,  765,  728,  768,  769,  754,  725,  755,  728,  771,
      757,  758,  772,  773,  729,  778,    0,  779,  760,  730,

        0,  780,    0,  761,    0,  762,  781,  764,  765,  782,
      768,  769,  832,    0,  785,  781,  771,  779,  783,  772,
      773,  780,  778,  784,  779,  786,  781,  786,  780,  782,
      784,  787,  783,  781,  785,  788,  782,    0,  783,  832,
      789,  785,  781,  784,  779,  783,  787,  786,  780,  791,
      784,  787,  786,  781,  786,  788,  782,  784,  787,  783,
      789,  785,  788,  792,  790,  783,  790,  789,  793,  791,
      784,    0,  794,  787,  786,    0,  791,  795,  787,    0,
      796,  797,  788,  792,    0,  798,  790,  789,  793,  796,
      792,  790,  794,  790,  799,  793,  791,  795,  800,  794,

      796,  797,  801,    0,  795,  798,  803,  796,  797,    0,
      792,  804,  798,  790,  799,  793,  796,  802,  800,  794,
      834,  799,  801,  807,  795,  800,  803,  796,  797,  801,
      802,  804,  798,  803,  839,  805,  806,  802,  804,  808,
      806,  799,  805,  807,  802,  800,    0,  834,  809,  801,
      807,  810,  811,  803,  808,  805,  841,  802,  804,  808,
      806,  839,  805,  806,  802,  814,  808,  806,  809,  805,
      807,  810,  811,  815,  812,  809,  812,  813,  810,  811,
        0,  808,  805,  841,    0,  814,  808,  806,  818,  842,
      817,  813,  814,  815,  817,  809,  812,  813,  810,  811,

      815,  812,  816,  812,  813,  822,    0,  819,  818,  816,
      817,  819,  814,  821,    0,  818,  842,  817,  813,  823,
      815,  817,  816,  812,  813,  822,  820,  824,  821,  816,
      820,  819,  822,  821,  819,  818,  816,  817,  819,  823,
      821,  825,  845,  848,  826,  849,  823,  824,  850,  816,
      820,  826,  822,  820,  824,  821,  851,  820,  819,  853,
      821,  825,  854,    0,  826,  855,  823,  856,  825,  845,
      848,  826,  849,  857,  824,  850,  859,  820,  826,  853,
      858,  861,  854,  851,  858,  855,  853,  856,  825,  854,
      860,  826,  855,  857,  856,  862,  859,    0,  863,  864,

      857,  861,    0,  859,  858,  860,  853,  858,  861,  854,
      860,  858,  855,  866,  856,  862,  868,  860,  863,  864,
      857,  867,  862,  859,  869,  863,  864,  865,  861,  865,
      870,  858,  860,  866,  867,  872,  868,  860,  871,  873,
      866,  867,  862,  868,  869,  863,  864,  879,  867,  865,
      870,  869,  877,  871,  865,  872,  865,  870,  871,  873,
      866,  867,  872,  868,  874,  871,  873,  876,  867,  878,
      875,  869,  877,  874,  879,  876,  865,  870,  881,  877,
      871,  883,  872,  875,  874,  871,  873,  876,  885,  878,
      875,  874,  886,  887,  876,    0,  878,  875,  889,  877,

      874,  890,  876,  892,  899,  881,  894,  891,  883,    0,
      875,  874,  896,  889,  876,  885,  878,  875,  889,  886,
      887,  890,  891,  892,  893,  889,  894,  891,  890,    0,
      892,  899,  896,  894,  891,  897,  895,  893,  895,  896,
      889,  898,  901,    0,  893,  889,  897,  905,  890,  891,
      892,  893,  906,  894,  891,  897,  895,  909,  910,  896,
      913,  898,  897,  895,  893,  895,  907,  905,  898,  901,
      908,  893,  906,  897,  905,  914,  915,  909,  910,  906,
      907,  917,  897,  895,  909,  910,  907,  913,  898,  918,
      908,  919,  908,  907,  905,  914,  915,  908,  918,  906,

      920,  920,  914,  915,  909,  910,  916,  907,  917,  918,
      916,  921,  922,  907,  923,  924,  918,  908,  919,    0,
      926,  920,  914,  915,    0,  918,  916,  920,  920,    0,
        0,    0,  922,  916,  924,  924,  918,  916,  921,  922,
      926,  923,  924,    0,    0,    0,    0,  926,  920,    0,
        0,    0,    0,  916,    0,    0,    0,    0,    0,  922,
        0,  924,  924,    0,    0,    0,    0,  926,  928,    0,
        0,  928,  929,    0,  929,  929,  931,    0,  931,  931,
      932,    0,  932,  932,  933,    0,  933,  933,  934,    0,
      934,  934,  927,  927,  927,  927,  927,  927,  927,  927,

      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "sqllib.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { yylval->sval = strdup(yytext); return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1605 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 1888 "flex_lexer.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 928 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 927 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(SUBSTRING_INDEX)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(SUBSTRING)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 123:
#line 185 "flex_lexer.l"
case 124:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 125:
#line 191 "flex_lexer.l"
case 126:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2609 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 928 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 928 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 927);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 216 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
	if (msg == NULL) {
		fprintf(stderr, "[SQL-Lexer-Error] msg = NULL\n");
	} else fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg);
	return 0;
}
