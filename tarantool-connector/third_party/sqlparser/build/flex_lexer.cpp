#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 130
#define YY_END_OF_BUFFER 131
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[926] =
    {   0,
        0,    0,    2,    2,  131,  129,    4,    4,  129,  129,
      122,  129,  122,  122,  125,  122,  122,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
        2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  118,    0,    0,  128,
        1,  124,  123,  125,  120,  119,  121,  127,  127,  127,
      127,  127,  109,  127,  110,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  111,  127,  112,  113,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  114,
      115,  116,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  117,  127,
      127,  127,  127,  127,  127,  127,  127,    2,    2,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      126,  123,   96,  127,   97,  127,  127,   98,   99,  127,
      127,  127,  127,  127,  127,  127,  127,  100,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  101,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  102,  127,  127,  103,
      127,  127,  127,  127,  127,  127,  127,  127,  104,  127,

      127,  105,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  106,  127,  127,  127,  127,  127,  107,
      127,  127,  127,  108,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  127,  127,
      127,  127,  127,   74,  127,  127,  127,  127,  127,   75,
      127,  127,  127,  127,   76,  127,  127,  127,   77,  127,
      127,  127,  127,  127,   78,   79,   80,  127,  127,   81,
      127,   82,  127,  127,  127,  127,  127,  127,   83,  127,
       84,   85,   86,  127,   87,  127,  127,  127,  127,   88,
      127,  127,  127,  127,  127,   89,   90,  127,  127,  127,
      127,  127,  127,  127,   91,  127,  127,  127,  127,  127,

       92,   93,  127,  127,  127,  127,  127,  127,  127,   94,
      127,  127,   95,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   56,   57,

      127,  127,  127,  127,  127,  127,  127,   58,  127,  127,
      127,   59,  127,  127,  127,  127,  127,  127,  127,  127,
      127,   60,  127,  127,  127,   61,   62,  127,  127,  127,
      127,   63,   64,   65,   66,  127,  127,  127,   67,   68,
      127,  127,  127,  127,  127,   69,  127,  127,  127,  127,
      127,   70,  127,  127,  127,   71,  127,  127,  127,   72,
      127,  127,   73,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  127,   32,
      127,  127,   33,  127,   34,  127,  127,   35,   36,  127,
       37,   38,   39,  127,   40,  127,   41,   42,  127,   43,
       44,  127,  127,   45,  127,  127,   46,  127,  127,  127,
       47,  127,   48,   49,   50,  127,  127,   51,  127,  127,
      127,   52,   53,   54,   55,  127,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   16,   17,   18,   19,   20,  127,
       21,  127,   22,   23,   24,   25,  127,   26,  127,  127,
       27,   28,  127,   29,   30,  127,  127,  127,  127,   31,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  127,   12,  127,   13,
      127,   14,  127,  127,  127,   15,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  127,    8,  127,    9,

       10,   11,    2,    2,    2,    2,    2,    2,    6,    7,
      127,    2,    2,    2,  127,    2,  127,    2,  127,    2,
      127,    2,    5,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    6,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        1,    1,    1,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[933] =
    {   0,
        0,    0,   66,    0,  396, 3693,  131,  133,  359,    0,
     3693,  363,  358,  354,  128,  127,  350,  124,  124,  132,
      178,  113,  171,  122,  130,  184,  120,  136,  139,  137,
      187,  220,  183,    0,  195,  266,  314,  229,  231,  241,
        0,  163,  257,  342,  348,    0,  345,  343,  336,  255,
      255,  321,  372,  431,  483,  535,  259,  583,  261,  376,
      631,  292,  322,  364,  385,  683,  731,  783,  323,  429,
      833,  885,  933,  434,  439,  267, 3693,  310,  298, 3693,
     3693,  293,  283,  266, 3693, 3693, 3693,    0,  141,  165,
      283,  190,  230,  279,    0,  306,  368,  289,  313,  367,

      439,  423,  367,  418,  443,  484,  437,  432,  437,  441,
      440,  475,  473,  480,    0,  480,  527,  483,  494,  480,
      500,  499,  542,  489,  524,  522,  528,  537,  550,  546,
        0,  550,  535,  538,  556,  557,  545,  578,  582,  582,
      580,  578,  596,  597,  598,  591,  592,  593,  591,  590,
      630,  609,  605,  608,  641,  643,  629,    0,  299,    0,
      266,  250,    0,    0,  245,  242,  340,    0,    0,    0,
      649,  675,  662,  708,  691,  721,  760,  665,  729,  757,
      762,  781,  785,  985,  821,  795,  819,  820, 1035,  852,
      837,  873,  887,  891,  903,  929,  948,  904,  977, 1084,

      982,  963,  987, 1000, 1017, 1045, 1054, 1022, 1075, 1076,
     1080, 1089, 1128, 1059, 1133, 1115, 1124, 1138, 1143, 1167,
     1166, 1169, 1177, 1178, 1207, 1206, 1212, 1221, 1210, 1223,
     1252, 1235, 1251, 1276, 1264, 1261, 1286, 1289, 1277, 1285,
     3693,  240,    0,  646,    0,  653,  650,    0,    0,  676,
      679,  691,  709,  749,  771,  801,  837,    0,  865,  862,
      879,  937,  890,  890,  912,  942,  934, 1007, 1011, 1023,
     1022, 1044, 1061,    0, 1105, 1112, 1155, 1157, 1198, 1218,
     1259, 1280, 1304, 1315, 1317, 1318, 1321, 1303, 1316,    0,
     1311, 1328, 1326, 1335, 1339, 1335, 1322, 1323,    0, 1333,

     1330, 1333, 1349, 1350, 1358, 1342, 1345, 1351, 1364, 1348,
     1365, 1369, 1371,    0, 1354, 1360, 1364, 1366, 1375,    0,
     1373, 1370, 1388,    0, 1380, 1381, 1382, 1398, 1388, 1385,
     1385, 1389, 1392, 1405,    0,  208, 1413, 1414, 1417, 1422,
     1436, 1425, 1426, 1438, 1439, 1447, 1478, 1477, 1480, 1491,
     1482, 1479, 1488, 1510, 1516, 1513, 1521, 1531, 1532, 1545,
     1550, 1553, 1562, 1566, 1567, 1583, 1575, 1584, 1598, 1612,
     1623, 1621, 1624, 1636, 1638, 1642, 1666, 1652, 1655, 1661,
     1677, 1674, 1691, 1678, 1692, 1695, 1706, 1729, 1720, 1730,
     1744, 1745, 1731, 1762, 1766, 1754, 1763, 1780, 1802, 1785,

     1803, 1808, 1819, 1784, 1833, 1818, 1820, 1834, 1851, 1837,
     1862, 1856, 1868, 1872, 1874, 1890, 1873, 1886, 1907, 1918,
     1926, 1929, 1931, 1944, 1941, 1962, 1970, 1972, 1410, 1449,
     1579, 1588, 1607,    0, 1700, 1701, 1733, 1733, 1756,    0,
     1880, 1892, 1908, 1943,    0, 1944, 1943, 1972,    0, 1969,
     1970, 1968, 1970, 1997,    0,    0,    0, 1998, 1984,    0,
     1987,    0, 1988, 1987, 1982, 1990, 1992, 2011,    0, 2007,
        0,    0,    0, 2000,    0, 2009, 2018, 2012, 2016,    0,
     2033, 2033, 2021, 2022, 2028,    0,    0, 2041, 2042, 2031,
     2031, 2031, 2039, 2050,    0, 2049, 2046, 2037, 2054, 2045,

        0, 2043, 2061, 2058, 2052, 2073, 2055, 2070, 2078,    0,
     2064, 2083,    0, 2088, 2089, 2091, 2093, 2092, 2103, 2104,
     2114, 2132, 2142, 2144, 2126, 2147, 2160, 2148, 2182, 2166,
     2198, 2188, 2197, 2200, 2201, 2222, 2210, 2236, 2238, 2232,
     2246, 2250, 2268, 2276, 2254, 2262, 2272, 2280, 2305, 2302,
     2311, 2313, 2334, 2308, 2330, 2339, 2342, 2356, 2365, 2367,
     2368, 2370, 2379, 2371, 2396, 2410, 2401, 2409, 2419, 2425,
     2404, 2427, 2438, 2444, 2442, 2455, 2463, 2473, 2486, 2476,
     2487, 2497, 2512, 2498, 2499, 2515, 2529, 2540, 2521, 2531,
     2573, 2564, 2561, 2555, 2572, 2585, 2577, 2583,    0,    0,

     2069, 2098, 2143, 2157, 2205, 2206, 2240,    0, 2306, 2339,
     2378,    0, 2438, 2544, 2571, 2586, 2574, 2579, 2581, 2603,
     2602,    0, 2612, 2602, 2602,    0,    0, 2603, 2623, 2611,
     2619,    0,    0,    0,    0, 2631, 2626, 2616,    0,    0,
     2633, 2622, 2624, 2638, 2635,    0, 2644, 2628, 2647, 2651,
     2635, 2635, 2638, 2640, 2661,    0, 2659, 2662, 2663,    0,
     2654, 2673,    0, 2671, 2672, 2680, 2677, 2683, 2694, 2702,
     2705, 2689, 2706, 2734, 2739, 2723, 2731, 2740, 2748, 2745,
     2756, 2774, 2785, 2777, 2802, 2808, 2790, 2811, 2823, 2799,
     2825, 2834, 2844, 2847, 2848, 2853, 2856, 2857, 2865, 2878,

     2897, 2879, 2896, 2888, 2901, 2902, 2914, 2919, 2910, 2936,
     2931, 2964, 2950, 2953, 2975, 2942, 2974, 2986, 2990, 3007,
     2996, 3004, 3009, 3018, 3019, 3028, 3044, 3041, 2681,    0,
     2676, 2735, 2723, 2762,    0, 2782, 2778,    0,    0, 2841,
        0,    0,    0, 2918,    0, 2976,    0,    0, 2973,    0,
        0, 3012, 3047,    0, 3042, 3054,    0, 3038, 3057, 3038,
        0, 3061, 3046,    0,    0, 3055, 3059,    0, 3074, 3076,
     3058,    0,    0,    0,    0, 3071, 3081, 3082, 3083, 3093,
     3098, 3104, 3094, 3117, 3107, 3096, 3106, 3148, 3132, 3135,
     3136, 3147, 3150, 3160, 3158, 3161, 3166, 3171, 3172, 3189,

     3184, 3190, 3214, 3224, 3203, 3212, 3206, 3215, 3225, 3240,
     3243, 3246, 3249, 3268, 3274, 3277, 3283, 3289, 3298, 3280,
     3299, 3308, 3311, 3322,    0,    0,    0,    0,    0, 3205,
        0, 3240,    0,    0,    0,    0, 3266,    0, 3301, 3317,
        0,    0, 3305,    0,    0, 3314, 3319, 3325, 3334,    0,
     3337, 3343, 3348, 3351, 3352, 3366, 3353, 3367, 3354, 3365,
     3376, 3377, 3407, 3388, 3406, 3391, 3402, 3410, 3416, 3420,
     3421, 3442, 3439, 3456, 3445, 3450, 3402,    0, 3413,    0,
     3447,    0, 3459, 3451, 3462,    0, 3475, 3474, 3484, 3485,
     3493, 3496, 3507, 3508, 3518, 3510, 3514,    0, 3501,  172,

        0,    0, 3519, 3524, 3547, 3548, 3549, 3552,    0,    0,
     3546, 3553, 3558, 3582, 3551, 3581, 3563, 3584, 3564, 3592,
     3574, 3603,    0, 3598, 3693, 3668, 3672,  191, 3676, 3680,
     3684, 3688
    } ;

static yyconst flex_int16_t yy_def[933] =
    {   0,
      925,    1,  925,    3,  925,  925,  925,  925,  925,  926,
      925,  927,  925,  925,  925,  925,  925,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      929,  929,  925,  929,  930,  929,  931,  929,  929,  929,
      929,  929,  932,  932,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,  925,  925,  926,  927,  925,
      925,  925,  925,  925,  925,  925,  925,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,

      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  929,  929,  929,
      930,  931,  929,  929,  929,  929,  929,  929,  929,  929,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
      925,  925,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,

      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  929,  929,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,

      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,  928,  928,

      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  928,  928,  928,  928,

      928,  928,   54,   54,   54,   54,   54,   54,  928,  928,
      928,   54,   54,   54,  928,   54,  928,   54,  928,   54,
      928,   54,  928,   54,    0,  925,  925,  925,  925,  925,
      925,  925
    } ;

static yyconst flex_int16_t yy_nxt[3760] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   11,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   34,   34,   34,    6,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   34,   34,   34,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   46,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       74,   75,   69,   69,   69,   41,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   69,
       69,   69,   76,   76,   76,   76,   83,   84,   85,   86,
       89,   94,   90,  113,  105,   96,  111,  119,   91,  106,
       92,  114,  112,  120,  124,   93,  121,  243,  125,   97,
      122,   95,   98,   99,  159,   76,  123,   89,   94,   90,
      113,  105,   96,  111,  119,   91,  106,   92,  114,  112,
      120,  124,   93,  121,  243,  125,   97,  122,   95,   98,
       99,  100,  107,  123,   88,  101,  134,  244,  108,  102,

      126,  109,  115,  247,  110,  103,  248,  135,  104,  116,
      117,  911,  137,  136,  127,  118,  138,  336,  100,  107,
      128,  129,  101,  134,  244,  108,  102,  126,  109,  115,
      247,  110,  103,  248,  135,  104,  116,  117,  130,  137,
      136,  127,  118,  138,  154,  249,  131,  128,  129,  242,
      132,  336,  155,  133,  165,  151,  163,  152,   76,   76,
      153,  156,  157,  166,  167,  130,  168,  169,   76,   76,
      335,  154,  249,  131,   83,   84,  171,  132,  171,  155,
      133,  139,  151,  140,  152,  194,  141,  153,  156,  157,
      188,  195,  242,  142,  143,  189,  171,  250,  171,  144,

      159,   76,   82,  171,   80,  171,  256,  245,  139,  171,
      140,  251,  194,  141,  241,  246,  257,  188,  195,  202,
      142,  143,  189,  171,  250,  171,  144,  145,  146,  171,
      252,  147,  170,  256,  245,  148,  171,  253,  251,  203,
      171,  149,  246,  257,  150,  165,  202,  258,  166,  167,
      164,  163,  158,  160,  145,  146,  171,  252,  147,  171,
      171,   87,  148,   82,  253,   81,  203,  171,  149,   80,
       77,  150,  158,  158,  258,  158,  158,  158,  158,  158,
      158,  204,  158,  158,  158,  205,  171,  171,  172,  196,
      173,  206,  254,  171,  255,  925,  174,  197,  175,  259,

      266,  171,  207,  176,  925,  925,  208,  925,  204,  925,
      925,  925,  205,  171,  925,  172,  196,  173,  206,  254,
      171,  255,  171,  174,  197,  175,  259,  266,  171,  207,
      176,  158,  158,  208,  158,  158,  158,  158,  158,  158,
      171,  158,  158,  158,  925,  267,  220,  237,  177,  171,
      221,  171,  260,  264,  265,  238,  171,  261,  268,  239,
      240,  273,  274,  262,  275,  276,  171,  277,  178,  925,
      263,  171,  267,  220,  237,  177,  171,  221,  171,  260,
      264,  265,  238,  171,  261,  268,  239,  240,  273,  274,
      262,  275,  276,  171,  277,  178,  179,  263,  171,  269,

      171,  270,  278,  171,  279,  271,  281,  280,  283,  288,
      180,  282,  272,  181,  182,  289,  925,  290,  291,  296,
      171,  925,  292,  179,  293,  925,  269,  171,  270,  278,
      925,  279,  271,  281,  280,  283,  288,  180,  282,  272,
      181,  182,  289,  284,  290,  291,  296,  171,  183,  292,
      297,  293,  184,  285,  298,  294,  185,  295,  286,  287,
      299,  300,  186,  301,  302,  187,  303,  304,  305,  306,
      284,  309,  171,  925,  307,  183,  310,  297,  308,  184,
      285,  298,  294,  185,  295,  286,  287,  299,  300,  186,
      301,  302,  187,  303,  304,  305,  306,  311,  309,  171,

      171,  307,  312,  310,  190,  308,  313,  315,  316,  317,
      191,  318,  319,  192,  314,  320,  193,  321,  323,  324,
      171,  925,  925,  325,  311,  328,  329,  171,  322,  312,
      925,  190,  330,  313,  315,  316,  317,  191,  318,  319,
      192,  314,  320,  193,  321,  323,  324,  171,  171,  198,
      325,  326,  328,  329,  327,  322,  199,  200,  331,  330,
      333,  334,  201,  429,  925,  925,  171,  925,  171,  925,
      430,  332,  925,  925,  431,  171,  198,  925,  326,  171,
      925,  327,  171,  199,  200,  331,  171,  333,  334,  201,
      429,  337,  171,  171,  338,  171,  209,  430,  332,  171,

      171,  431,  171,  432,  341,  925,  171,  342,  171,  171,
      210,  925,  171,  171,  433,  434,  211,  212,  337,  171,
      171,  338,  925,  209,  435,  171,  171,  171,  171,  171,
      432,  341,  339,  925,  342,  171,  343,  210,  171,  171,
      340,  433,  434,  211,  212,  171,  171,  171,  171,  213,
      925,  435,  171,  346,  925,  171,  925,  214,  171,  339,
      347,  215,  925,  343,  216,  171,  171,  340,  171,  925,
      925,  925,  171,  171,  171,  171,  213,  171,  344,  350,
      346,  348,  436,  349,  214,  171,  925,  347,  215,  351,
      925,  216,  345,  171,  171,  171,  217,  171,  171,  171,

      171,  171,  171,  437,  171,  344,  350,  218,  348,  436,
      349,  925,  171,  219,  438,  352,  351,  353,  171,  345,
      171,  171,  171,  217,  171,  171,  171,  171,  360,  171,
      437,  925,  171,  925,  218,  362,  171,  171,  171,  171,
      219,  438,  352,  925,  353,  171,  361,  171,  222,  171,
      223,  358,  359,  224,  171,  360,  171,  171,  171,  171,
      225,  226,  362,  171,  171,  171,  227,  368,  439,  171,
      171,  925,  925,  361,  171,  222,  367,  223,  358,  359,
      224,  171,  440,  171,  171,  171,  441,  225,  226,  171,
      171,  925,  442,  227,  368,  439,  171,  171,  228,  229,

      369,  171,  230,  367,  171,  445,  231,  446,  171,  440,
      171,  370,  232,  441,  925,  233,  171,  171,  371,  442,
      171,  171,  171,  925,  171,  228,  229,  369,  171,  230,
      372,  171,  445,  231,  446,  171,  925,  171,  370,  232,
      171,  171,  233,  925,  447,  371,  171,  171,  171,  171,
      171,  171,  925,  925,  443,  171,  448,  372,  925,  234,
      373,  235,  449,  374,  236,  171,  171,  171,  171,  444,
      171,  447,  925,  171,  375,  925,  925,  171,  925,  376,
      171,  443,  925,  448,  383,  171,  234,  373,  235,  449,
      374,  236,  171,  171,  171,  925,  444,  171,  354,  171,

      171,  375,  171,  355,  171,  377,  376,  171,  382,  356,
      925,  383,  171,  925,  171,  925,  357,  171,  385,  171,
      450,  171,  171,  925,  384,  354,  171,  171,  451,  171,
      355,  171,  377,  925,  171,  382,  356,  171,  452,  171,
      386,  171,  387,  357,  171,  385,  171,  450,  391,  171,
      363,  384,  364,  453,  171,  451,  365,  925,  388,  171,
      389,  171,  171,  366,  171,  452,  171,  386,  454,  387,
      925,  171,  171,  925,  925,  391,  171,  363,  455,  364,
      453,  171,  171,  365,  390,  388,  171,  389,  925,  171,
      366,  171,  171,  171,  925,  454,  171,  171,  171,  171,

      378,  171,  395,  171,  394,  455,  171,  392,  393,  171,
      379,  390,  171,  171,  925,  380,  381,  171,  171,  171,
      171,  171,  925,  171,  171,  925,  171,  378,  171,  395,
      456,  394,  171,  171,  392,  393,  457,  379,  925,  171,
      171,  171,  380,  381,  171,  171,  396,  398,  171,  397,
      171,  400,  171,  171,  399,  171,  925,  456,  925,  171,
      401,  171,  925,  457,  402,  171,  925,  925,  171,  458,
      171,  925,  171,  396,  398,  171,  397,  171,  400,  171,
      171,  399,  171,  171,  171,  405,  171,  401,  171,  406,
      459,  402,  171,  403,  171,  171,  458,  171,  404,  925,

      925,  407,  171,  171,  171,  409,  171,  171,  925,  408,
      171,  171,  405,  171,  171,  171,  406,  459,  460,  411,
      403,  171,  171,  171,  171,  404,  412,  171,  407,  171,
      171,  171,  409,  171,  414,  413,  408,  410,  171,  461,
      171,  171,  171,  171,  171,  460,  411,  171,  415,  171,
      171,  171,  171,  412,  171,  925,  171,  925,  171,  416,
      171,  414,  413,  418,  410,  171,  461,  171,  171,  171,
      171,  171,  171,  925,  171,  415,  171,  417,  171,  171,
      422,  171,  423,  925,  419,  171,  416,  171,  171,  171,
      418,  462,  925,  171,  427,  171,  171,  420,  171,  171,

      421,  171,  171,  171,  417,  171,  425,  422,  171,  423,
      424,  419,  463,  171,  171,  171,  171,  428,  462,  426,
      171,  427,  171,  171,  420,  171,  171,  421,  171,  171,
      171,  464,  465,  425,  466,  467,  470,  424,  468,  463,
      171,  171,  471,  472,  428,  473,  426,  474,  469,  171,
      171,  475,  476,  171,  477,  478,  479,  480,  464,  465,
      481,  466,  467,  470,  482,  468,  483,  484,  487,  471,
      472,  485,  473,  488,  474,  469,  489,  490,  475,  476,
      491,  477,  478,  479,  480,  492,  493,  481,  494,  495,
      486,  482,  496,  483,  484,  487,  497,  498,  485,  499,

      488,  500,  501,  489,  490,  502,  503,  491,  504,  506,
      505,  507,  492,  493,  508,  494,  495,  486,  509,  496,
      510,  511,  512,  497,  498,  513,  499,  925,  500,  501,
      171,  514,  502,  503,  171,  504,  506,  505,  507,  515,
      599,  508,  171,  171,  925,  509,  925,  510,  511,  512,
      171,  171,  513,  171,  171,  171,  171,  171,  514,  171,
      516,  171,  171,  171,  171,  517,  515,  599,  925,  171,
      171,  519,  925,  171,  518,  171,  171,  171,  171,  600,
      171,  171,  171,  171,  171,  925,  171,  516,  925,  171,
      171,  171,  517,  520,  171,  171,  171,  171,  519,  171,

      171,  518,  171,  171,  523,  525,  600,  925,  171,  925,
      521,  171,  522,  524,  171,  171,  171,  171,  925,  171,
      520,  171,  171,  171,  171,  171,  171,  171,  171,  527,
      528,  523,  525,  171,  526,  171,  530,  521,  171,  522,
      524,  171,  171,  171,  171,  529,  171,  171,  531,  171,
      171,  925,  171,  171,  171,  171,  527,  528,  171,  533,
      171,  526,  171,  530,  532,  171,  535,  171,  171,  171,
      171,  925,  529,  925,  171,  531,  171,  171,  534,  536,
      171,  537,  171,  171,  171,  171,  533,  171,  925,  171,
      171,  532,  540,  535,  171,  171,  171,  171,  538,  171,

      171,  171,  925,  171,  171,  534,  536,  539,  537,  171,
      171,  171,  171,  925,  171,  171,  601,  171,  602,  540,
      171,  171,  925,  541,  603,  538,  171,  171,  171,  171,
      171,  171,  925,  925,  539,  171,  542,  543,  171,  171,
      171,  171,  171,  601,  545,  602,  925,  171,  171,  171,
      541,  603,  925,  171,  544,  171,  171,  546,  171,  171,
      171,  171,  171,  542,  543,  171,  925,  171,  171,  550,
      547,  545,  551,  171,  548,  171,  171,  925,  552,  171,
      171,  544,  171,  171,  546,  171,  171,  171,  171,  171,
      925,  171,  171,  549,  553,  171,  550,  547,  171,  551,

      171,  548,  171,  171,  554,  552,  171,  555,  171,  171,
      171,  171,  558,  604,  171,  171,  171,  556,  171,  171,
      549,  553,  171,  171,  557,  171,  605,  559,  171,  171,
      171,  554,  171,  561,  555,  171,  171,  171,  171,  558,
      604,  171,  171,  171,  556,  560,  171,  171,  171,  562,
      171,  557,  925,  605,  559,  171,  171,  171,  925,  171,
      561,  171,  171,  606,  171,  607,  171,  171,  171,  925,
      171,  171,  560,  171,  171,  171,  562,  563,  564,  171,
      568,  171,  171,  171,  171,  567,  565,  608,  171,  171,
      606,  171,  607,  171,  171,  171,  566,  569,  171,  171,

      171,  171,  171,  171,  563,  564,  171,  568,  171,  171,
      171,  572,  567,  565,  608,  570,  576,  171,  171,  171,
      171,  171,  171,  566,  569,  171,  171,  171,  171,  171,
      171,  573,  575,  574,  571,  578,  171,  579,  572,  171,
      171,  925,  570,  576,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  577,  171,  171,  171,  171,  573,  575,
      574,  571,  578,  171,  579,  925,  171,  171,  171,  581,
      171,  171,  171,  171,  171,  925,  925,  171,  171,  171,
      577,  171,  171,  171,  171,  171,  580,  583,  171,  171,
      587,  171,  584,  171,  582,  171,  581,  171,  171,  171,

      171,  171,  585,  171,  609,  171,  171,  171,  925,  171,
      171,  171,  171,  580,  583,  171,  171,  587,  171,  584,
      171,  582,  586,  171,  171,  610,  171,  171,  925,  585,
      171,  609,  171,  588,  171,  171,  171,  171,  171,  925,
      611,  925,  592,  171,  171,  589,  171,  590,  171,  586,
      171,  171,  610,  591,  171,  171,  612,  593,  171,  613,
      588,  171,  171,  171,  614,  925,  171,  611,  171,  592,
      171,  171,  589,  171,  590,  171,  595,  594,  171,  171,
      591,  171,  171,  612,  593,  171,  613,  171,  171,  171,
      171,  614,  598,  171,  596,  171,  615,  616,  617,  171,

      597,  618,  619,  595,  594,  171,  171,  171,  171,  171,
      620,  621,  622,  623,  171,  624,  171,  625,  626,  598,
      627,  596,  628,  615,  616,  617,  171,  597,  618,  619,
      629,  631,  632,  633,  171,  634,  171,  620,  621,  622,
      623,  630,  624,  635,  625,  626,  636,  627,  637,  628,
      638,  639,  640,  641,  642,  643,  644,  629,  631,  632,
      633,  645,  634,  646,  647,  648,  649,  650,  630,  651,
      635,  652,  653,  636,  654,  637,  655,  638,  639,  640,
      641,  642,  643,  644,  656,  657,  658,  659,  645,  660,
      646,  647,  648,  649,  650,  661,  651,  662,  652,  653,

      663,  654,  925,  655,  925,  171,  171,  729,  171,  668,
      171,  656,  657,  658,  659,  730,  660,  669,  664,  665,
      171,  171,  661,  667,  662,  171,  171,  663,  666,  171,
      171,  171,  171,  171,  729,  171,  668,  171,  925,  670,
      171,  171,  730,  171,  669,  664,  665,  171,  171,  171,
      667,  171,  171,  171,  925,  666,  171,  171,  171,  171,
      731,  171,  671,  171,  171,  171,  670,  171,  171,  171,
      171,  674,  925,  732,  672,  673,  171,  171,  171,  171,
      676,  171,  925,  171,  171,  171,  171,  731,  171,  671,
      171,  171,  171,  675,  925,  677,  171,  171,  674,  171,

      732,  672,  673,  171,  171,  171,  171,  676,  171,  679,
      171,  171,  171,  678,  171,  171,  925,  171,  171,  171,
      675,  680,  677,  925,  171,  171,  171,  171,  925,  681,
      171,  733,  171,  734,  171,  171,  679,  171,  171,  171,
      678,  171,  171,  683,  171,  171,  171,  171,  680,  171,
      682,  685,  171,  171,  171,  171,  681,  735,  733,  171,
      734,  171,  171,  171,  171,  171,  171,  171,  684,  171,
      683,  171,  925,  171,  171,  171,  171,  682,  685,  171,
      171,  686,  171,  171,  735,  171,  171,  171,  688,  171,
      171,  171,  925,  171,  171,  684,  171,  171,  171,  171,

      171,  925,  171,  925,  687,  171,  171,  689,  686,  171,
      171,  925,  171,  171,  171,  688,  171,  171,  171,  171,
      171,  925,  171,  925,  171,  171,  171,  925,  171,  925,
      171,  687,  171,  736,  689,  690,  171,  925,  691,  171,
      171,  692,  171,  693,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  694,  696,  171,  171,  171,  925,  171,
      736,  925,  690,  737,  695,  691,  171,  171,  692,  171,
      693,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      694,  696,  171,  171,  171,  171,  171,  699,  171,  925,
      737,  695,  698,  171,  171,  738,  171,  697,  171,  925,

      171,  701,  171,  171,  171,  171,  171,  171,  171,  171,
      700,  171,  171,  171,  699,  171,  171,  925,  703,  698,
      171,  171,  738,  171,  697,  702,  171,  171,  701,  171,
      925,  171,  171,  171,  171,  171,  171,  700,  171,  704,
      171,  171,  171,  171,  171,  703,  171,  171,  171,  705,
      706,  707,  702,  171,  171,  171,  171,  708,  925,  171,
      171,  171,  171,  171,  171,  171,  704,  709,  171,  171,
      739,  171,  171,  171,  171,  171,  705,  706,  707,  171,
      171,  171,  171,  171,  708,  710,  171,  925,  171,  171,
      171,  171,  171,  171,  709,  711,  925,  739,  712,  171,

      171,  713,  171,  171,  714,  925,  171,  171,  171,  925,
      171,  925,  710,  171,  171,  717,  171,  171,  715,  171,
      171,  925,  711,  171,  171,  712,  718,  171,  713,  171,
      171,  714,  171,  925,  171,  171,  171,  171,  171,  925,
      171,  171,  717,  171,  716,  715,  171,  721,  171,  171,
      171,  171,  171,  718,  925,  720,  171,  171,  171,  171,
      719,  171,  171,  171,  722,  171,  171,  925,  171,  925,
      740,  716,  726,  171,  721,  171,  171,  171,  171,  171,
      725,  171,  720,  925,  171,  171,  723,  719,  741,  171,
      171,  722,  171,  171,  728,  171,  724,  740,  171,  726,

      171,  171,  171,  742,  171,  171,  743,  725,  171,  171,
      171,  744,  745,  723,  171,  741,  171,  171,  727,  171,
      171,  728,  171,  724,  746,  171,  747,  171,  171,  171,
      742,  748,  749,  743,  750,  751,  171,  171,  744,  745,
      752,  171,  753,  754,  755,  727,  756,  171,  757,  171,
      758,  746,  759,  747,  760,  761,  762,  763,  748,  749,
      764,  750,  751,  765,  766,  767,  768,  752,  769,  753,
      754,  755,  770,  756,  771,  757,  772,  758,  773,  759,
      774,  760,  761,  762,  763,  775,  776,  764,  171,  171,
      765,  766,  767,  768,  778,  769,  925,  171,  825,  770,

      779,  771,  826,  772,  925,  773,  783,  774,  171,  171,
      780,  171,  775,  776,  171,  171,  171,  171,  777,  171,
      171,  778,  171,  171,  171,  825,  171,  779,  781,  826,
      925,  171,  782,  783,  925,  171,  171,  780,  171,  171,
      786,  171,  171,  171,  171,  777,  171,  171,  171,  171,
      171,  171,  827,  171,  828,  781,  171,  171,  171,  782,
      171,  784,  789,  785,  925,  171,  171,  786,  171,  171,
      171,  171,  787,  790,  788,  171,  171,  171,  171,  827,
      925,  828,  171,  171,  171,  171,  829,  171,  784,  789,
      785,  171,  171,  171,  171,  171,  925,  830,  171,  787,

      790,  788,  171,  171,  171,  925,  791,  171,  793,  171,
      831,  171,  171,  829,  171,  925,  171,  792,  171,  171,
      171,  171,  171,  794,  830,  171,  925,  171,  171,  171,
      796,  798,  795,  791,  171,  793,  171,  831,  171,  171,
      171,  171,  171,  171,  792,  171,  171,  925,  171,  171,
      794,  171,  171,  797,  171,  171,  832,  796,  798,  795,
      171,  171,  171,  171,  800,  171,  171,  171,  925,  171,
      171,  171,  171,  171,  171,  171,  799,  802,  171,  801,
      797,  171,  171,  832,  171,  171,  925,  171,  171,  171,
      171,  800,  171,  171,  171,  171,  171,  171,  171,  804,

      171,  171,  171,  799,  802,  171,  801,  925,  171,  171,
      803,  171,  171,  171,  171,  171,  171,  171,  171,  806,
      171,  171,  171,  171,  925,  171,  804,  809,  805,  171,
      925,  171,  171,  171,  171,  833,  171,  803,  171,  171,
      171,  171,  171,  171,  807,  171,  806,  171,  171,  808,
      925,  171,  171,  171,  809,  805,  171,  810,  171,  171,
      171,  171,  833,  171,  925,  171,  171,  171,  171,  813,
      171,  807,  815,  171,  171,  171,  808,  811,  171,  171,
      171,  171,  812,  171,  810,  925,  171,  171,  814,  925,
      171,  171,  171,  925,  171,  171,  813,  171,  925,  815,

      171,  171,  834,  171,  811,  816,  171,  171,  171,  812,
      835,  171,  171,  171,  171,  814,  817,  171,  171,  171,
      819,  820,  818,  171,  171,  821,  171,  171,  171,  834,
      171,  925,  816,  171,  171,  822,  171,  835,  171,  171,
      171,  171,  836,  817,  171,  171,  171,  819,  820,  818,
      171,  171,  821,  171,  171,  171,  171,  824,  171,  823,
      171,  171,  822,  171,  837,  171,  838,  839,  171,  836,
      840,  171,  171,  171,  841,  842,  843,  844,  171,  845,
      846,  171,  171,  171,  824,  171,  823,  847,  171,  848,
      849,  837,  171,  838,  839,  850,  925,  840,  851,  171,

      171,  841,  842,  843,  844,  171,  845,  846,  171,  852,
      853,  171,  925,  171,  847,  171,  848,  849,  171,  171,
      171,  171,  850,  171,  171,  851,  171,  171,  855,  854,
      171,  171,  856,  171,  171,  171,  852,  853,  171,  857,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  855,  854,  171,  171,  856,
      171,  171,  171,  858,  859,  171,  857,  171,  171,  171,
      171,  171,  171,  171,  925,  171,  171,  171,  171,  171,
      171,  171,  925,  171,  171,  171,  860,  171,  171,  171,
      858,  859,  171,  925,  171,  171,  171,  171,  171,  171,

      171,  863,  171,  861,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  860,  171,  171,  171,  925,  877,  862,
      171,  171,  171,  867,  171,  171,  171,  171,  863,  171,
      861,  171,  171,  171,  171,  171,  171,  865,  864,  925,
      171,  171,  171,  171,  866,  877,  862,  171,  171,  171,
      867,  171,  868,  171,  171,  869,  171,  171,  171,  171,
      171,  171,  171,  171,  865,  864,  171,  171,  171,  171,
      171,  866,  878,  925,  870,  925,  171,  171,  171,  868,
      171,  879,  869,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  871,  171,  171,  872,  873,  171,  925,  878,

      171,  870,  874,  925,  171,  171,  171,  171,  879,  925,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  871,
      171,  171,  872,  873,  171,  171,  171,  171,  171,  874,
      875,  880,  171,  171,  881,  171,  171,  882,  171,  171,
      883,  171,  171,  171,  171,  171,  876,  171,  171,  884,
      885,  886,  171,  171,  171,  171,  925,  875,  880,  171,
      171,  881,  171,  171,  882,  171,  171,  883,  171,  171,
      171,  171,  171,  876,  171,  171,  884,  885,  886,  887,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  888,

      925,  171,  171,  171,  171,  171,  887,  171,  891,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  889,  171,  171,  171,  888,  171,  171,  171,
      171,  171,  171,  171,  897,  891,  890,  171,  171,  171,
      171,  171,  925,  171,  171,  898,  171,  171,  892,  889,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  897,  896,  890,  171,  171,  171,  171,  893,  894,
      171,  171,  898,  171,  171,  892,  171,  899,  900,  171,
      171,  895,  171,  171,  171,  171,  171,  171,  901,  896,
      902,  171,  171,  171,  171,  893,  894,  925,  925,  925,

      171,  171,  171,  171,  899,  900,  171,  903,  895,  171,
      171,  171,  171,  171,  171,  901,  904,  902,  171,  171,
      171,  171,  171,  905,  171,  171,  906,  171,  171,  171,
      171,  909,  910,  171,  903,  171,  912,  171,  171,  171,
      171,  171,  925,  904,  171,  907,  908,  171,  171,  171,
      905,  171,  171,  906,  171,  171,  171,  171,  909,  910,
      171,  171,  171,  912,  171,  171,  171,  915,  171,  171,
      171,  171,  907,  908,  171,  171,  925,  917,  913,  919,
      925,  921,  171,  171,  171,  171,  171,  914,  171,  171,
      171,  171,  171,  171,  915,  171,  171,  171,  171,  171,

      920,  171,  171,  916,  917,  913,  919,  918,  921,  922,
      923,  171,  171,  171,  925,  171,  171,  171,  171,  171,
      171,  171,  171,  925,  925,  171,  171,  920,  171,  171,
      916,  925,  925,  925,  918,  171,  922,  923,  925,  924,
      171,  925,  171,  925,  925,  171,  171,  171,  171,  925,
      925,  925,  925,  925,  925,  925,  171,  925,  925,  925,
      925,  925,  171,  925,  925,  925,  924,  171,   78,  925,
      925,   78,   79,  925,   79,   79,  158,  925,  158,  158,
      161,  925,  161,  161,  162,  925,  162,  162,  171,  925,
      171,  171,    5,  925,  925,  925,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925
    } ;

static yyconst flex_int16_t yy_chk[3760] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    7,    7,    8,    8,   15,   15,   16,   16,
       18,   19,   18,   25,   22,   20,   24,   27,   18,   22,
       18,   25,   24,   28,   30,   18,   29,   89,   30,   20,
       29,   19,   20,   20,   42,   42,   29,   18,   19,   18,
       25,   22,   20,   24,   27,   18,   22,   18,   25,   24,
       28,   30,   18,   29,   89,   30,   20,   29,   19,   20,
       20,   21,   23,   29,  928,   21,   33,   90,   23,   21,

       31,   23,   26,   92,   23,   21,   92,   33,   21,   26,
       26,  900,   35,   33,   31,   26,   35,  336,   21,   23,
       31,   31,   21,   33,   90,   23,   21,   31,   23,   26,
       92,   23,   21,   92,   33,   21,   26,   26,   32,   35,
       33,   31,   26,   35,   39,   93,   32,   31,   31,  242,
       32,  166,   39,   32,  165,   38,  162,   38,   43,   43,
       38,   40,   40,   50,   50,   32,   51,   51,   76,   76,
      161,   39,   93,   32,   84,   84,   57,   32,   59,   39,
       32,   36,   38,   36,   38,   59,   36,   38,   40,   40,
       57,   59,   83,   36,   36,   57,   57,   94,   59,   36,

      159,  159,   82,   57,   79,   59,   98,   91,   36,   62,
       36,   94,   59,   36,   78,   91,   98,   57,   59,   62,
       36,   36,   57,   57,   94,   59,   36,   37,   37,   62,
       96,   37,   52,   98,   91,   37,   62,   96,   94,   63,
       69,   37,   91,   98,   37,   49,   62,   99,  167,  167,
       48,   47,   45,   44,   37,   37,   62,   96,   37,   63,
       69,   17,   37,   14,   96,   13,   63,   69,   37,   12,
        9,   37,   53,   53,   99,   53,   53,   53,   53,   53,
       53,   64,   53,   53,   53,   64,   63,   69,   53,   60,
       53,   64,   97,   60,   97,    5,   53,   60,   53,  100,

      103,   64,   65,   53,    0,    0,   65,    0,   64,    0,
        0,    0,   64,   60,    0,   53,   60,   53,   64,   97,
       60,   97,   65,   53,   60,   53,  100,  103,   64,   65,
       53,   54,   54,   65,   54,   54,   54,   54,   54,   54,
       60,   54,   54,   54,    0,  104,   70,   74,   54,   65,
       70,   74,  101,  102,  102,   74,   75,  101,  105,   75,
       75,  107,  108,  101,  109,  110,   70,  111,   54,    0,
      101,   74,  104,   70,   74,   54,   75,   70,   74,  101,
      102,  102,   74,   75,  101,  105,   75,   75,  107,  108,
      101,  109,  110,   70,  111,   54,   55,  101,   74,  106,

       55,  106,  112,   75,  113,  106,  114,  113,  116,  118,
       55,  114,  106,   55,   55,  119,    0,  120,  121,  124,
       55,    0,  122,   55,  122,    0,  106,   55,  106,  112,
        0,  113,  106,  114,  113,  116,  118,   55,  114,  106,
       55,   55,  119,  117,  120,  121,  124,   55,   56,  122,
      125,  122,   56,  117,  126,  123,   56,  123,  117,  117,
      127,  128,   56,  129,  130,   56,  132,  133,  134,  135,
      117,  137,   56,    0,  136,   56,  137,  125,  136,   56,
      117,  126,  123,   56,  123,  117,  117,  127,  128,   56,
      129,  130,   56,  132,  133,  134,  135,  138,  137,   56,

       58,  136,  139,  137,   58,  136,  140,  141,  142,  143,
       58,  144,  145,   58,  140,  146,   58,  147,  148,  149,
       58,    0,    0,  150,  138,  152,  153,   58,  147,  139,
        0,   58,  154,  140,  141,  142,  143,   58,  144,  145,
       58,  140,  146,   58,  147,  148,  149,   58,   61,   61,
      150,  151,  152,  153,  151,  147,   61,   61,  155,  154,
      156,  157,   61,  244,    0,    0,  171,    0,   61,    0,
      246,  155,    0,    0,  247,   61,   61,    0,  151,  173,
        0,  151,  178,   61,   61,  155,  171,  156,  157,   61,
      244,  172,  172,  171,  173,   61,   66,  246,  155,  173,

       66,  247,  178,  250,  175,    0,  173,  175,  175,  178,
       66,    0,  172,  171,  251,  252,   66,   66,  172,  172,
       66,  173,    0,   66,  253,  174,  173,   66,  175,  178,
      250,  175,  174,    0,  175,  175,  176,   66,  176,  172,
      174,  251,  252,   66,   66,  174,  179,   66,   67,   67,
        0,  253,  174,  179,    0,  175,    0,   67,  176,  174,
      179,   67,    0,  176,   67,  176,  179,  174,   67,    0,
        0,    0,  174,  179,  180,   67,   67,  177,  177,  181,
      179,  180,  254,  180,   67,  176,    0,  179,   67,  181,
        0,   67,  177,  179,  180,   67,   68,  177,  182,  181,

       68,  180,  183,  255,  177,  177,  181,   68,  180,  254,
      180,    0,  186,   68,  256,  182,  181,  183,  182,  177,
       68,  180,  183,   68,  177,  182,  181,   68,  186,  183,
      255,    0,  186,    0,   68,  188,  187,  188,  185,  186,
       68,  256,  182,    0,  183,  182,  187,   68,   71,  183,
       71,  185,  185,   71,  191,  186,  187,  188,  185,  186,
       71,   71,  188,  187,  188,  185,   71,  191,  257,  190,
       71,    0,    0,  187,  191,   71,  190,   71,  185,  185,
       71,  191,  259,  187,  188,  185,  260,   71,   71,  190,
      192,    0,  261,   71,  191,  257,  190,   71,   72,   72,

      192,  191,   72,  190,  193,  263,   72,  264,  194,  259,
      192,  193,   72,  260,    0,   72,  190,  192,  194,  261,
      195,  198,   72,    0,  193,   72,   72,  192,  194,   72,
      195,  193,  263,   72,  264,  194,    0,  192,  193,   72,
      195,  198,   72,    0,  265,  194,  196,  195,  198,   72,
       73,  193,    0,    0,  262,  194,  266,  195,    0,   73,
      196,   73,  267,  196,   73,  197,  196,  195,  198,  262,
       73,  265,    0,  196,  197,    0,    0,   73,    0,  197,
      202,  262,    0,  266,  202,  197,   73,  196,   73,  267,
      196,   73,  197,  196,  199,    0,  262,   73,  184,  201,

      202,  197,  184,  184,  203,  199,  197,  202,  201,  184,
        0,  202,  197,    0,  199,    0,  184,  204,  204,  201,
      268,  199,  184,    0,  203,  184,  201,  202,  269,  184,
      184,  203,  199,    0,  205,  201,  184,  204,  270,  208,
      205,  199,  205,  184,  204,  204,  201,  268,  208,  184,
      189,  203,  189,  271,  205,  269,  189,    0,  206,  208,
      206,  205,  206,  189,  204,  270,  208,  205,  272,  205,
        0,  207,  189,    0,    0,  208,  214,  189,  273,  189,
      271,  205,  206,  189,  207,  206,  208,  206,    0,  206,
      189,  207,  209,  210,    0,  272,  214,  211,  207,  189,

      200,  200,  212,  214,  211,  273,  212,  209,  210,  206,
      200,  207,  209,  210,    0,  200,  200,  211,  207,  209,
      210,  200,    0,  214,  211,    0,  212,  200,  200,  212,
      275,  211,  216,  212,  209,  210,  276,  200,    0,  209,
      210,  217,  200,  200,  211,  213,  213,  216,  200,  215,
      215,  218,  216,  212,  217,  218,    0,  275,    0,  216,
      219,  217,    0,  276,  219,  213,    0,    0,  217,  277,
      215,    0,  213,  213,  216,  218,  215,  215,  218,  216,
      219,  217,  218,  221,  220,  221,  222,  219,  217,  222,
      278,  219,  213,  220,  223,  224,  277,  215,  220,    0,

        0,  223,  218,  221,  220,  224,  222,  219,    0,  223,
      221,  220,  221,  222,  223,  224,  222,  278,  279,  226,
      220,  223,  224,  226,  225,  220,  227,  229,  223,  227,
      221,  220,  224,  222,  229,  228,  223,  225,  228,  280,
      230,  223,  224,  226,  225,  279,  226,  229,  230,  227,
      226,  225,  232,  227,  229,    0,  227,    0,  228,  230,
      230,  229,  228,  232,  225,  228,  280,  230,  233,  231,
      226,  225,  232,    0,  229,  230,  227,  231,  236,  232,
      235,  235,  236,    0,  233,  228,  230,  230,  233,  231,
      232,  281,    0,  234,  239,  233,  231,  234,  236,  232,

      234,  235,  240,  237,  231,  236,  238,  235,  235,  236,
      237,  233,  282,  234,  239,  233,  231,  240,  281,  238,
      234,  239,  240,  237,  234,  236,  238,  234,  235,  240,
      237,  283,  284,  238,  285,  286,  288,  237,  287,  282,
      234,  239,  289,  291,  240,  292,  238,  293,  287,  240,
      237,  294,  295,  238,  296,  297,  298,  300,  283,  284,
      301,  285,  286,  288,  302,  287,  303,  304,  306,  289,
      291,  305,  292,  307,  293,  287,  308,  309,  294,  295,
      310,  296,  297,  298,  300,  311,  312,  301,  313,  315,
      305,  302,  316,  303,  304,  306,  317,  318,  305,  319,

      307,  321,  322,  308,  309,  323,  325,  310,  326,  327,
      326,  328,  311,  312,  329,  313,  315,  305,  330,  316,
      331,  332,  333,  317,  318,  334,  319,    0,  321,  322,
      337,  338,  323,  325,  339,  326,  327,  326,  328,  340,
      429,  329,  342,  343,    0,  330,    0,  331,  332,  333,
      337,  338,  334,  341,  339,  344,  345,  337,  338,  340,
      341,  339,  342,  343,  346,  344,  340,  429,    0,  342,
      343,  346,    0,  341,  345,  344,  345,  337,  338,  430,
      341,  339,  344,  345,  346,    0,  340,  341,    0,  342,
      343,  346,  344,  347,  348,  347,  352,  349,  346,  351,

      341,  345,  344,  345,  350,  353,  430,    0,  350,    0,
      348,  346,  349,  351,  348,  347,  352,  349,    0,  351,
      347,  348,  347,  352,  349,  353,  351,  354,  350,  355,
      356,  350,  353,  355,  354,  350,  357,  348,  357,  349,
      351,  348,  347,  352,  349,  356,  351,  354,  358,  359,
      356,    0,  353,  355,  354,  350,  355,  356,  357,  360,
      355,  354,  360,  357,  359,  357,  362,  361,  358,  359,
      362,    0,  356,    0,  354,  358,  359,  356,  361,  363,
      355,  364,  360,  364,  365,  357,  360,  361,    0,  360,
      362,  359,  367,  362,  361,  358,  359,  362,  365,  363,

      366,  368,    0,  364,  365,  361,  363,  366,  364,  360,
      364,  365,  367,    0,  361,  369,  431,  362,  432,  367,
      366,  368,    0,  369,  433,  365,  363,  366,  368,  370,
      364,  365,    0,    0,  366,  369,  370,  371,  372,  367,
      371,  373,  369,  431,  373,  432,    0,  366,  368,  370,
      369,  433,    0,  374,  372,  375,  370,  374,  372,  376,
      371,  373,  369,  370,  371,  372,    0,  371,  373,  378,
      375,  373,  379,  374,  376,  375,  370,    0,  380,  376,
      374,  372,  375,  377,  374,  372,  376,  371,  373,  378,
        0,  382,  379,  377,  381,  384,  378,  375,  380,  379,

      374,  376,  375,  377,  381,  380,  376,  382,  383,  385,
      377,  382,  386,  435,  381,  384,  378,  383,  382,  379,
      377,  381,  384,  387,  385,  380,  436,  387,  383,  385,
      377,  381,  386,  389,  382,  383,  385,  389,  382,  386,
      435,  381,  384,  387,  383,  388,  388,  390,  393,  390,
      387,  385,    0,  436,  387,  383,  385,  389,    0,  386,
      389,  391,  392,  437,  389,  438,  388,  390,  393,    0,
      387,  396,  388,  388,  390,  393,  390,  391,  392,  394,
      397,  391,  392,  395,  389,  396,  394,  439,  391,  392,
      437,  396,  438,  388,  390,  393,  395,  398,  396,  394,

      397,  404,  400,  395,  391,  392,  394,  397,  391,  392,
      395,  400,  396,  394,  439,  399,  404,  398,  396,  399,
      401,  404,  400,  395,  398,  402,  394,  397,  404,  400,
      395,  401,  403,  402,  399,  406,  403,  407,  400,  399,
      401,    0,  399,  404,  398,  402,  399,  401,  404,  400,
      405,  408,  402,  405,  410,  406,  403,  407,  401,  403,
      402,  399,  406,  403,  407,    0,  399,  401,  409,  410,
      405,  408,  402,  412,  410,    0,    0,  405,  408,  411,
      405,  410,  406,  403,  407,  413,  409,  412,  409,  414,
      417,  415,  413,  412,  411,  409,  410,  405,  408,  411,

      412,  410,  415,  418,  441,  413,  411,  416,    0,  414,
      417,  415,  413,  409,  412,  409,  414,  417,  415,  413,
      412,  411,  416,  418,  419,  442,  411,  416,    0,  415,
      418,  441,  413,  419,  416,  420,  414,  417,  415,    0,
      443,    0,  422,  421,  419,  420,  422,  420,  423,  416,
      418,  419,  442,  421,  416,  420,  444,  423,  425,  446,
      419,  424,  420,  421,  447,    0,  422,  443,  423,  422,
      421,  419,  420,  422,  420,  423,  425,  424,  425,  426,
      421,  424,  420,  444,  423,  425,  446,  427,  424,  428,
      421,  447,  428,  422,  426,  423,  448,  450,  451,  426,

      427,  452,  453,  425,  424,  425,  426,  427,  424,  428,
      454,  458,  459,  461,  427,  463,  428,  464,  465,  428,
      466,  426,  467,  448,  450,  451,  426,  427,  452,  453,
      468,  470,  474,  476,  427,  477,  428,  454,  458,  459,
      461,  468,  463,  478,  464,  465,  479,  466,  481,  467,
      482,  483,  484,  485,  488,  489,  490,  468,  470,  474,
      476,  491,  477,  492,  493,  494,  496,  497,  468,  498,
      478,  499,  500,  479,  502,  481,  503,  482,  483,  484,
      485,  488,  489,  490,  504,  505,  506,  507,  491,  508,
      492,  493,  494,  496,  497,  509,  498,  511,  499,  500,

      512,  502,    0,  503,    0,  514,  515,  601,  516,  518,
      517,  504,  505,  506,  507,  602,  508,  520,  514,  515,
      519,  520,  509,  517,  511,  514,  515,  512,  516,  518,
      517,  521,  514,  515,  601,  516,  518,  517,    0,  521,
      519,  520,  602,  525,  520,  514,  515,  519,  520,  522,
      517,  521,  514,  515,    0,  516,  518,  517,  521,  523,
      603,  524,  522,  525,  526,  528,  521,  519,  520,  522,
      525,  526,    0,  604,  523,  524,  522,  527,  521,  523,
      528,  524,    0,  530,  526,  528,  523,  603,  524,  522,
      525,  526,  528,  527,    0,  529,  522,  527,  526,  529,

      604,  523,  524,  530,  527,  532,  523,  528,  524,  532,
      530,  526,  528,  531,  533,  531,    0,  534,  535,  529,
      527,  533,  529,    0,  527,  532,  529,  537,    0,  535,
      530,  605,  532,  606,  533,  531,  532,  534,  535,  536,
      531,  533,  531,  537,  534,  535,  529,  537,  533,  540,
      536,  539,  532,  538,  537,  539,  535,  607,  605,  536,
      606,  533,  531,  541,  534,  535,  536,  542,  538,  540,
      537,  545,    0,  538,  537,  539,  540,  536,  539,  546,
      538,  543,  539,  541,  607,  543,  536,  542,  546,  547,
      541,  545,    0,  544,  542,  538,  540,  548,  545,  546,

      538,    0,  539,    0,  544,  543,  546,  548,  543,  547,
      541,    0,  543,  544,  542,  546,  547,  548,  545,  550,
      544,    0,  549,    0,  548,  554,  546,    0,  551,    0,
      552,  544,  543,  609,  548,  549,  547,    0,  550,  550,
      544,  551,  549,  552,  548,  554,  550,  555,  551,  549,
      552,  553,  554,  553,  555,  551,  556,  552,    0,  557,
      609,    0,  549,  610,  553,  550,  550,  555,  551,  549,
      552,  553,  554,  558,  555,  551,  556,  552,  553,  557,
      553,  555,  559,  556,  560,  561,  557,  562,  564,    0,
      610,  553,  561,  558,  555,  611,  563,  559,  553,    0,

      558,  564,  559,  556,  560,  561,  557,  562,  564,  559,
      563,  560,  561,  565,  562,  564,  563,    0,  567,  561,
      558,  571,  611,  563,  559,  566,  568,  566,  564,  559,
        0,  560,  561,  565,  562,  564,  569,  563,  567,  568,
      565,  571,  570,  563,  572,  567,  568,  566,  571,  569,
      570,  573,  566,  568,  566,  573,  569,  574,    0,  575,
      565,  574,  570,  569,  572,  567,  568,  575,  571,  570,
      613,  572,  576,  568,  566,  573,  569,  570,  573,  575,
      577,  574,  573,  569,  574,  576,  575,    0,  574,  570,
      578,  572,  576,  580,  575,  577,    0,  613,  578,  576,

      577,  579,  573,  579,  581,    0,  575,  577,  574,    0,
      578,    0,  576,  580,  582,  584,  585,  578,  582,  576,
      580,    0,  577,  579,  581,  578,  585,  577,  579,  583,
      579,  581,  586,    0,  582,  584,  585,  578,  589,    0,
      580,  582,  584,  585,  583,  582,  587,  589,  590,  583,
      579,  581,  586,  585,    0,  588,  583,  588,  589,  586,
      587,  582,  584,  585,  590,  589,  587,    0,  590,    0,
      614,  583,  594,  587,  589,  590,  583,  588,  593,  586,
      593,  592,  588,    0,  588,  589,  591,  587,  615,  595,
      591,  590,  594,  587,  597,  590,  592,  614,  593,  594,

      598,  592,  596,  616,  588,  593,  617,  593,  592,  595,
      591,  618,  619,  591,  597,  615,  595,  591,  596,  594,
      598,  597,  596,  592,  620,  593,  621,  598,  592,  596,
      616,  623,  624,  617,  625,  628,  595,  591,  618,  619,
      629,  597,  630,  631,  636,  596,  637,  598,  638,  596,
      641,  620,  642,  621,  643,  644,  645,  647,  623,  624,
      648,  625,  628,  649,  650,  651,  652,  629,  653,  630,
      631,  636,  654,  637,  655,  638,  657,  641,  658,  642,
      659,  643,  644,  645,  647,  661,  662,  648,  664,  665,
      649,  650,  651,  652,  667,  653,    0,  666,  729,  654,

      668,  655,  731,  657,    0,  658,  672,  659,  664,  665,
      669,  669,  661,  662,  667,  664,  665,  666,  666,  670,
      668,  667,  671,  673,  666,  729,  672,  668,  670,  731,
        0,  669,  671,  672,    0,  664,  665,  669,  669,  670,
      676,  667,  671,  673,  666,  666,  670,  668,  677,  671,
      673,  674,  732,  672,  733,  670,  675,  678,  669,  671,
      676,  674,  680,  675,    0,  679,  670,  676,  677,  671,
      673,  674,  678,  681,  679,  677,  675,  678,  674,  732,
        0,  733,  680,  675,  678,  679,  734,  676,  674,  680,
      675,  682,  679,  681,  684,  677,    0,  736,  674,  678,

      681,  679,  683,  675,  678,    0,  682,  687,  684,  680,
      737,  682,  679,  734,  684,    0,  690,  683,  682,  685,
      681,  684,  683,  685,  736,  686,    0,  687,  688,  683,
      688,  690,  686,  682,  687,  684,  690,  737,  682,  685,
      689,  684,  691,  690,  683,  686,  685,    0,  688,  683,
      685,  692,  686,  689,  687,  688,  740,  688,  690,  686,
      689,  693,  691,  690,  694,  695,  685,  689,    0,  691,
      696,  692,  686,  697,  698,  688,  693,  696,  692,  695,
      689,  693,  699,  740,  694,  695,    0,  689,  693,  691,
      696,  694,  695,  697,  698,  700,  702,  696,  692,  702,

      697,  698,  699,  693,  696,  704,  695,    0,  693,  699,
      701,  694,  695,  703,  701,  700,  702,  696,  705,  706,
      697,  698,  700,  702,    0,  704,  702,  709,  703,  699,
        0,  707,  704,  703,  701,  744,  708,  701,  705,  706,
      703,  701,  700,  702,  707,  705,  706,  709,  711,  708,
        0,  707,  704,  710,  709,  703,  708,  710,  707,  716,
      703,  701,  744,  708,    0,  705,  706,  713,  711,  714,
      714,  707,  716,  710,  709,  711,  708,  712,  707,  716,
      710,  712,  713,  708,  710,    0,  716,  713,  715,    0,
      714,  717,  715,    0,  713,  711,  714,  714,    0,  716,

      710,  712,  746,  718,  712,  717,  716,  719,  712,  713,
      749,  717,  715,  721,  713,  715,  718,  714,  717,  715,
      720,  722,  719,  718,  720,  723,  723,  719,  712,  746,
      718,    0,  717,  721,  719,  724,  725,  749,  717,  715,
      721,  722,  752,  718,  720,  726,  723,  720,  722,  719,
      718,  720,  723,  723,  719,  724,  725,  727,  728,  726,
      721,  727,  724,  725,  753,  726,  755,  756,  722,  752,
      758,  720,  726,  723,  759,  760,  762,  763,  728,  766,
      767,  727,  724,  725,  727,  728,  726,  769,  727,  770,
      771,  753,  726,  755,  756,  776,    0,  758,  777,  778,

      779,  759,  760,  762,  763,  728,  766,  767,  727,  779,
      780,  783,    0,  786,  769,  781,  770,  771,  777,  778,
      779,  782,  776,  787,  785,  777,  778,  779,  782,  781,
      780,  783,  784,  786,  784,  781,  779,  780,  783,  785,
      786,  782,  781,  787,  785,  777,  778,  779,  782,  789,
      787,  785,  790,  791,  784,  782,  781,  780,  783,  784,
      786,  784,  781,  788,  792,  788,  785,  793,  782,  789,
      787,  785,  790,  791,    0,  795,  789,  794,  796,  790,
      791,  784,    0,  797,  792,  788,  794,  793,  798,  799,
      788,  792,  788,    0,  793,  795,  789,  794,  796,  790,

      791,  801,  795,  797,  794,  796,  800,  802,  798,  799,
      797,  792,  788,  794,  793,  798,  799,    0,  830,  800,
      805,  801,  795,  807,  794,  796,  800,  802,  801,  806,
      797,  803,  808,  800,  802,  798,  799,  804,  803,    0,
      805,  804,  809,  807,  806,  830,  800,  805,  801,  806,
      807,  803,  808,  800,  802,  810,  806,  810,  803,  808,
      811,  804,  809,  812,  804,  803,  813,  805,  804,  809,
      807,  806,  832,    0,  811,    0,  806,  810,  803,  808,
      811,  837,  810,  812,  810,  814,  813,  811,  804,  809,
      812,  815,  814,  813,  816,  815,  817,  820,    0,  832,

      817,  811,  818,    0,  810,  814,  818,  811,  837,    0,
      812,  815,  814,  813,  816,  819,  821,  820,  815,  814,
      817,  816,  815,  817,  820,  822,  818,  817,  823,  818,
      819,  839,  814,  818,  840,  819,  821,  843,  815,  824,
      846,  816,  819,  821,  820,  822,  824,  817,  823,  847,
      848,  849,  822,  818,  851,  823,    0,  819,  839,  824,
      852,  840,  819,  821,  843,  853,  824,  846,  854,  855,
      857,  859,  822,  824,  851,  823,  847,  848,  849,  856,
      852,  851,  860,  856,  858,  853,  824,  852,  854,  855,
      857,  859,  853,  861,  862,  854,  855,  857,  859,  858,

        0,  851,  860,  856,  858,  864,  856,  852,  866,  860,
      856,  858,  853,  861,  862,  854,  855,  857,  859,  867,
      861,  862,  863,  865,  863,  864,  858,  868,  866,  860,
      856,  858,  864,  869,  877,  866,  865,  870,  871,  867,
      861,  862,    0,  865,  863,  879,  867,  868,  869,  863,
      865,  863,  864,  869,  868,  866,  873,  870,  871,  872,
      869,  877,  875,  865,  870,  871,  867,  876,  872,  873,
      865,  863,  879,  874,  868,  869,  873,  881,  883,  872,
      869,  874,  875,  873,  870,  871,  872,  876,  884,  875,
      885,  888,  887,  874,  876,  872,  873,    0,    0,    0,

      874,  889,  890,  873,  881,  883,  872,  887,  874,  875,
      891,  888,  887,  892,  876,  884,  889,  885,  888,  887,
      874,  889,  890,  891,  893,  894,  893,  896,  889,  890,
      891,  897,  899,  892,  887,  895,  903,  891,  888,  887,
      892,  904,    0,  889,  893,  894,  895,  896,  889,  890,
      891,  893,  894,  893,  896,  895,  903,  891,  897,  899,
      892,  904,  895,  903,  905,  906,  907,  911,  904,  908,
      912,  893,  894,  895,  896,  913,    0,  915,  905,  917,
        0,  919,  895,  903,  905,  906,  907,  906,  904,  908,
      912,  905,  906,  907,  911,  913,  908,  912,  916,  914,

      918,  918,  913,  914,  915,  905,  917,  916,  919,  920,
      921,  905,  906,  907,    0,  924,  908,  912,  916,  914,
      922,  918,  913,    0,    0,  916,  914,  918,  918,  920,
      914,    0,    0,    0,  916,  924,  920,  921,    0,  922,
      922,    0,  924,    0,    0,  916,  914,  922,  918,    0,
        0,    0,    0,    0,    0,    0,  920,    0,    0,    0,
        0,    0,  924,    0,    0,    0,  922,  922,  926,    0,
        0,  926,  927,    0,  927,  927,  929,    0,  929,  929,
      930,    0,  930,  930,  931,    0,  931,  931,  932,    0,
      932,  932,  925,  925,  925,  925,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "sqllib.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { yylval->sval = strdup(yytext); return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1605 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 1888 "flex_lexer.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 926 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 925 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(SUBSTRING_INDEX)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(SUBSTRING)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 123:
#line 185 "flex_lexer.l"
case 124:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2607 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 926 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 926 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 925);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 215 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
	if (msg == NULL) {
		fprintf(stderr, "[SQL-Lexer-Error] msg = NULL\n");
	} else fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg);
	return 0;
}
